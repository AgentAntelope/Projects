import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.Security;
import java.util.Scanner;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.ShortBufferException;
import javax.crypto.spec.IvParameterSpec;

import org.bouncycastle.crypto.engines.AESEngine;


public class hw1 {

	/**
	 * @param args
	 * @throws NoSuchPaddingException 
	 * @throws NoSuchProviderException 
	 * @throws NoSuchAlgorithmException 
	 * @throws InvalidAlgorithmParameterException 
	 * @throws InvalidKeyException 
	 * @throws ShortBufferException 
	 * @throws BadPaddingException 
	 * @throws IllegalBlockSizeException 
	 */
	public static void main(String[] args) throws NoSuchAlgorithmException, NoSuchProviderException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, ShortBufferException, IllegalBlockSizeException, BadPaddingException {
		// TODO Auto-generated method stub
	    Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());

		Scanner kbd = new Scanner(System.in);
		String inputString = kbd.nextLine();
		System.out.print("Type stuff in:");
		byte[] input = inputString.getBytes();
		
		byte[] ivBytes = new byte[] { 
				0x00, 0x00, 0x00, 0x01, 0x04, 0x05, 0x06, 0x07,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 };

		//initializing a new initialization vector  
		IvParameterSpec ivSpec  = new IvParameterSpec(ivBytes);
		//what does this actually do?
		Cipher cipher = Cipher.getInstance("AES/CTR/NoPadding", "BC");
		//what does this do?
		KeyGenerator generator = KeyGenerator.getInstance("AES","BC");
		//I assume this generates a key size of 192 bits
		generator.init(192);
		Key encryptKey = generator.generateKey();

		System.out.println("input: " +toHex(input));

		//encryption phase
		cipher.init(Cipher.ENCRYPT_MODE, encryptKey, ivSpec);
		//what is this doing?
		byte[] cipherText = new byte[cipher.getOutputSize(input.length)];
		//what is this doing?
		int ctLength = cipher.update(input, 0, input.length, cipherText,0);

		//getting the cipher text length i assume?
		ctLength += cipher.doFinal (cipherText, ctLength );
		System.out.println ("Cipher: " +toHex(cipherText) + " bytes: " + ctLength);


		//decryption phase
		cipher.init(Cipher.DECRYPT_MODE, encryptKey, ivSpec);
		//storing the ciphertext in plaintext i'm assuming?
		byte[] plainText = new byte[cipher.getOutputSize(ctLength)];
		int ptLength = cipher.update(cipherText, 0, ctLength, plainText, 0);
		//getting plaintextLength i think?
		ptLength= cipher.doFinal (plainText, ptLength);
		System.out.println("plain: " + toHex(plainText, ptLength));  

	}

	private static String digits = "0123456789abcdef";

	public static String toHex(byte[] data, int length)
	{
		StringBuffer buf = new StringBuffer();

		for (int i=0; i!= length; i++)
		{
			int v = data[i] & 0xff;

			buf.append(digits.charAt(v >>4));
			buf.append(digits.charAt(v & 0xf));
		}
		return buf.toString();

	}

	public static String toHex(byte[] data)
	{
		return toHex(data, data.length);
	}
}

