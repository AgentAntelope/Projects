import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

import javax.swing.JOptionPane;


public class ProteinFinder {
	public static void main (String [] args){

		//Create variables
		ArrayList<Protein> proteins = new ArrayList();
		ArrayList<String> idholder = new ArrayList();
		Scanner oboIn = null;
		Scanner gofeatIn = null;
		Scanner classIn = null;
		Scanner humanIn = null;
		

		//Read in all files
		File inFile = new File("OBOv1.3.txt");
		try {
			oboIn = new Scanner(inFile);
		} catch (FileNotFoundException e1) {
			System.out.println("OBOv1.3 not found");
		}
		
		inFile = new File("goFeatures.txt");
		try {
			gofeatIn = new Scanner(inFile);
		} catch (FileNotFoundException e1) {
			System.out.println("goFeature not found");
		}
		
		inFile = new File("CellPartClassification.txt");
		try {
			classIn = new Scanner(inFile);
		} catch (FileNotFoundException e1) {
			System.out.println("CellPartClassification not found");
		}
		
		inFile = new File("human.pos.go.bio.txt");
		try {
			humanIn = new Scanner(inFile);
		} catch (FileNotFoundException e1) {
			System.out.println("Human.pos.go not found");
		}

		//reads the goFeature.txt file and puts the ID's in an arraylist
		String lineTerm = null;
		for (lineTerm = gofeatIn.nextLine() ; gofeatIn.hasNextLine(); lineTerm = gofeatIn.nextLine()){
			lineTerm = lineTerm.substring(0, lineTerm.indexOf(" "));
			idholder.add(lineTerm);
		}
		lineTerm = lineTerm.substring(0, lineTerm.indexOf(" "));
		idholder.add(lineTerm);
		

		//sorts ID's
		Collections.sort(idholder);
		//Reads and interprets the OBOv1.3.txt file
		//and makes a protein for each valid ID
		//and then puts them in an array
		for(lineTerm = oboIn.nextLine() ; oboIn.hasNextLine(); lineTerm = oboIn.nextLine()){

			boolean isprotein = false;
			if(lineTerm.equals("[Term]")){
				String str = new String(oboIn.nextLine());

				Protein p =null;
				
				//check if this "Term" is a protein and is in the Cell
				for (int i = 0; i < str.length(); i++){
					if(str.charAt(i) == ':'  && str.charAt(i+1) != ' '){
						if(Collections.binarySearch(idholder, str.substring(i+1)) >=0){
							p = new Protein(str.substring(i+1));
							isprotein = true;
						}
						else isprotein = false;
					}	
				}
				
				str = new String(oboIn.nextLine());
				str = new String(oboIn.nextLine());
				if(str.equals("namespace: cellular_component")){
					isprotein = true;
				}
				else isprotein = false;
				
				
				if(isprotein == true && p != null){
					proteins.add(p);
				}
			}
		}
	
		
		Collections.sort(proteins);

		//Reads and interprets the CellPartClassification.txt file
		//and Gives each protein its location in the cell
		lineTerm = classIn.nextLine();
		String str = "";
		while(classIn.hasNextLine()){

			if(lineTerm.charAt(0) == '0'){

				int n = lineTerm.indexOf("#");
				String id = lineTerm.substring(0,n);
				Protein p = new Protein(id);
				int loc = binarySearch(proteins, proteins.size(),p);
				if(loc!=-1){
				//	System.out.println("success, " + str);
					proteins.get(loc).setLocation(str);
				}
				//System.out.println(id);
				
				for(lineTerm = classIn.nextLine() ; classIn.hasNextLine() && !lineTerm.equals(""); lineTerm = classIn.nextLine()){

					n = lineTerm.indexOf("#");
					id = lineTerm.substring(0,n);
					p = new Protein(id);
					loc = binarySearch(proteins, proteins.size(),p);	
					if(loc!=-1){
						proteins.get(loc).setLocation(str);
					}
				}
			}
		
			if(lineTerm.equals("") && classIn.hasNextLine()){

				lineTerm = classIn.nextLine();
				str = lineTerm;
				
			}
			else if(!lineTerm.equals("") && !classIn.hasNextLine()){

				int n = lineTerm.indexOf("#");
				String id = lineTerm.substring(0,n);
				Protein p = new Protein(id);
				int loc = binarySearch(proteins, proteins.size(),p);
				if(loc!=-1)proteins.get(loc).setLocation(str);			
			}
			else{
				str = lineTerm;
				lineTerm = classIn.nextLine();
			}
		}


		

		System.out.println("\n\n");
		for(int i = 0; i<proteins.size(); i++){
			if(!proteins.get(i).getLocation().equals(""))
			{
			System.out.println("location: "+proteins.get(i).getLocation());
			}
		}
		
		System.out.println(proteins.size());
		/*
		for(int i = 0; i < proteins.size(); i++){
			System.out.print(proteins.get(i).toString());
		}
		*/
	}
	
	
	
	
	
	
	
	public static int binarySearch(ArrayList<Protein> list, int listLength, Protein searchItem) {
	    int first=0;
	    int last = listLength - 1;
	    int mid;
	    
	    boolean found = false;
	    while(first <= last &&!found) {
	        mid = (first + last) /2;
	        
	        if(list.get(mid).getId().equals(searchItem.getId())) found = true;
	        else { 
	            if( Integer.parseInt(list.get(mid).getId()) > Integer.parseInt(searchItem.getId())) last = mid -1;
	            else first = mid + 1;
	        }
		    if(found) return mid;
	    }
	    return(-1);
	}
}
