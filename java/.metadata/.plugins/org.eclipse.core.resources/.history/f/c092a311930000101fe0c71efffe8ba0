package algs;

public class HashTable {
	private int tableSize;
	private int probe;
	private Object[] table;
	public HashTable(int size, int probeInterval){
		tableSize= findPrime(size);
		probe = probeInterval;
		table = new Object[tableSize];
	}
	public int hashCode(String tobe) {
		int hash = 0;
		int len = tobe.length();
		for ( int i=0; i<len; i++) {
		      hash = (31 * hash + tobe.charAt(i)) % tableSize;
		}
		return hash;
	}
	
	public void put(String key, Object value){
		int hashnum =  hashCode(key);
		if(table[hashnum] == null){
			table[hashnum] = value;
			return;
		}
		else{
			doubleHash(key, value, hashnum);
		}
	public void 
	}
	public int doubleHashCode(String key){
		int sizeStr = key.length();
		int hashp = key.charAt(sizeStr-1) + key.charAt(sizeStr-2)*31;
		hashp = hashp % probe;
		hashp++;
		return hashp;
		
	}
	public void doubleHash(String key, Object value, int currentPos){
		if(table[currentPos] == null){
			table[currentPos]= value;
		}
		else{
			int hashJump=(currentPos+doubleHashCode(key))%tableSize;
			doubleHash(key, value, hashJump);
		}
	}
	public int findPrime(int size){
		int prime = size;
		Boolean check = true;;
		while(check){
			check =checkPrime(prime);
			if(check)
			prime++;
		}
		return prime;
	}
	public Boolean checkPrime(int size){
		int i = size;
		int iter = 2;
		while(iter < i){
			if(i%iter == 0){
				return true;
			}
			iter++;
		}
		return false;
	}
	public static void main(String[]Args){
		new HashTable(80,10);
	}
}


