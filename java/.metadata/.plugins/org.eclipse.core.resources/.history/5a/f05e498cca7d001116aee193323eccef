import java.util.*;

public class CollinearPoint extends Point{
    
   
    public CollinearPoint(int x, int y){
        //Your Code Here
    	super(x,y);
    }
    
    // compare points by slope
    public final Comparator<CollinearPoint> SLOPE_ORDER = new Comparator<CollinearPoint>(){       // YOUR DEFINITION HERE   
        public int compare(CollinearPoint Q, CollinearPoint P){
          //Your Code Here
        	double slopeP = slope(P);
        	double slopeQ = slope(Q);
        	if(slopeP == slopeQ){
        		return 0;
        	}
        	else if(slopeP == Double.NEGATIVE_INFINITY){
        		return -1;
        	}
        	else if(slopeP == Double.POSITIVE_INFINITY){
        		return 1;
        	}
        	else{
        		if(slopeP - slopeQ > 0)
        			return 1;
        		else 
        			return -1;
        	}
        }
    };
    public double slope(CollinearPoint other){
    	double slopePQ = Integer.MIN_VALUE;
       	if(this.compareTo(other) != 0){
    		if((other.x()-this.x()) == 0){
    			slopePQ = Integer.MAX_VALUE;
    		}
    		else{
    			slopePQ = ((double)(other.y()-this.y()))/(other.x()-this.x());
    		}
        	
    	}
    	return slopePQ;
    }
    
    // are the 3 points p, q, and r collinear?
    public static boolean areCollinear(CollinearPoint p, CollinearPoint q, CollinearPoint r) {
         //Your Code Here
    	double slopePQ = Double.NEGATIVE_INFINITY;
    	double slopePR = Double.NEGATIVE_INFINITY;
    	if(p.compareTo(q) != 0){
    		if((q.x()-p.x()) == 0){
    			slopePQ = Double.POSITIVE_INFINITY;
    		}
    		else{
    			slopePQ = ((double)(q.y()-p.y()))/(q.x()-p.x());
    		}
        	
    	}
    	else{
    		return true;
    	}
    	if(p.compareTo(r) != 0){
    		if((r.x()-p.x()) == 0){
    			slopePR = Integer.MAX_VALUE;
    		}else{
    			slopePR = (((double)(r.y()-p.y()))/(r.x()-p.x()));
    		}
    	}
    	else{
    		return true;
    	}

    	return slopePQ == slopePR;
    }

    
    // are the 4 points p, q, r, and s collinear?
    public static boolean areCollinear(CollinearPoint p, CollinearPoint q, CollinearPoint r, CollinearPoint s) {
         //Your Code Here
    	return areCollinear(p,q,r) && areCollinear(p,r,s) && areCollinear(q,r,s) && areCollinear(p,q,s);
    }
    
}
    