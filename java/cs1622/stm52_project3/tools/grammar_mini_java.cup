package tools;
import java_cup.runtime.Symbol;

/* Preliminaries to use the scanner.  */
scan with {: return lexer.next_token(); :};

parser code {: 
  JavaLex lexer;
  public Parser(JavaLex lex) {
      super(lex);
      lexer = lex;

  }
:};
terminal IDENT, INT, INT_LIT, BOOLEAN, STRING, TRUE, FALSE;
terminal PUBLIC, STATIC, VOID, MAIN, EXTENDS, IF, WHILE, SYSTEM, OUT, PRINTLN, CLASS, RETURN, NEW, ELSE, LENGTH, THIS;
terminal LBRACE, LSQBRACKET, LPAREN, RBRACE, RSQBRACKET, RPAREN, SEMICOLON;
terminal COMMA, PERIOD, EQUAL, OP;
non terminal java_program;
non terminal main_class, class_decl, class_decls;
non terminal var_decl, var_decls, method_decl, method_decls;
non terminal formal_list, formal_rest, formal_rests, type;
non terminal statement, statements;
non terminal exp, exp_list, exp_rest;

precedence left OP;

start with java_program;
java_program ::= main_class class_decls
            ;
main_class  ::= CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LSQBRACKET RSQBRACKET IDENT RPAREN LBRACE statement RBRACE RBRACE
            ;
class_decls ::= class_decl class_decls
            |
            ;
class_decl  ::= CLASS IDENT LBRACE var_decls method_decls RBRACE
            |   CLASS IDENT EXTENDS IDENT LBRACE var_decls method_decls RBRACE
            ;
var_decls   ::= var_decls var_decl
            |
            ;
var_decl    ::= type IDENT SEMICOLON
            ;
method_decls::= method_decl method_decls
            |
            ;
method_decl ::= PUBLIC type IDENT LPAREN formal_list RPAREN LBRACE var_decls statements RETURN exp SEMICOLON RBRACE;
formal_list ::= type IDENT formal_rests;
formal_rests::= formal_rest formal_rests
            |
            ;
formal_rest ::= COMMA type IDENT
            ;
type        ::= INT LSQBRACKET RSQBRACKET
            |   BOOLEAN
            |   INT
            |   IDENT
            ;
statements  ::= statement statements
            |
            ;
statement   ::= LBRACE statements RBRACE
            |   IF LPAREN exp RPAREN statement ELSE statement
            |   WHILE LPAREN exp RPAREN statement
            |   SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMICOLON
            |   IDENT EQUAL exp SEMICOLON
            |   IDENT LSQBRACKET exp RSQBRACKET EQUAL exp SEMICOLON
            ;
exp         ::= exp OP exp
            | exp LSQBRACKET exp RSQBRACKET
            | exp PERIOD LENGTH
            | exp PERIOD IDENT LPAREN exp_list RPAREN
            | INT_LIT
            | TRUE
            | FALSE
            | IDENT
            | THIS
            | NEW INT LSQBRACKET exp RSQBRACKET
            | NEW IDENT LSQBRACKET RSQBRACKET
            ;
exp_list    ::= exp exp_rest
            | exp
            ;
exp_rest    ::= COMMA exp
            ;
