
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Oct 28 18:00:46 EDT 2012
//----------------------------------------------------

package tools;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Oct 28 18:00:46 EDT 2012
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\004\000\002\002\004\000\002\003" +
    "\023\000\002\005\004\000\002\005\002\000\002\004\010" +
    "\000\002\004\012\000\002\007\004\000\002\007\002\000" +
    "\002\006\005\000\002\011\004\000\002\011\002\000\002" +
    "\010\017\000\002\012\005\000\002\014\004\000\002\014" +
    "\002\000\002\013\005\000\002\015\005\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\017\004\000" +
    "\002\017\002\000\002\016\005\000\002\016\011\000\002" +
    "\016\007\000\002\016\013\000\002\016\006\000\002\016" +
    "\011\000\002\020\005\000\002\020\006\000\002\020\005" +
    "\000\002\020\010\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\007\000\002\020\006\000\002\021\004\000\002\021" +
    "\003\000\002\022\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\004\025\004\001\002\000\004\004\170\001" +
    "\002\000\004\002\167\001\002\000\006\002\ufffd\025\011" +
    "\001\002\000\004\002\000\001\002\000\006\002\ufffd\025" +
    "\011\001\002\000\004\004\012\001\002\000\006\017\014" +
    "\033\013\001\002\000\014\004\ufff9\005\ufff9\007\ufff9\013" +
    "\ufff9\036\ufff9\001\002\000\004\004\015\001\002\000\004" +
    "\033\016\001\002\000\014\004\ufff9\005\ufff9\007\ufff9\013" +
    "\ufff9\036\ufff9\001\002\000\014\004\024\005\027\007\026" +
    "\013\025\036\ufff6\001\002\000\004\036\162\001\002\000" +
    "\006\013\025\036\ufff6\001\002\000\004\004\157\001\002" +
    "\000\026\004\ufffa\005\ufffa\007\ufffa\013\ufffa\020\ufffa\021" +
    "\ufffa\022\ufffa\026\ufffa\033\ufffa\036\ufffa\001\002\000\004" +
    "\004\uffed\001\002\000\010\004\024\005\027\007\026\001" +
    "\002\000\004\004\uffef\001\002\000\006\004\uffee\034\030" +
    "\001\002\000\004\037\031\001\002\000\004\004\ufff0\001" +
    "\002\000\004\004\033\001\002\000\004\035\034\001\002" +
    "\000\010\004\024\005\027\007\026\001\002\000\004\040" +
    "\046\001\002\000\004\004\037\001\002\000\006\040\ufff2" +
    "\042\040\001\002\000\010\004\024\005\027\007\026\001" +
    "\002\000\004\040\ufff4\001\002\000\006\040\ufff2\042\040" +
    "\001\002\000\004\040\ufff3\001\002\000\004\004\045\001" +
    "\002\000\006\040\ufff1\042\ufff1\001\002\000\004\033\047" +
    "\001\002\000\022\004\ufff9\005\ufff9\007\ufff9\020\ufff9\021" +
    "\ufff9\022\ufff9\026\ufff9\033\ufff9\001\002\000\022\004\054" +
    "\005\027\007\026\020\055\021\053\022\051\026\uffeb\033" +
    "\052\001\002\000\004\043\147\001\002\000\016\004\061" +
    "\020\055\021\053\022\051\033\052\036\uffeb\001\002\000" +
    "\004\035\141\001\002\000\010\004\uffed\034\062\044\063" +
    "\001\002\000\004\035\133\001\002\000\004\026\127\001" +
    "\002\000\020\004\061\020\055\021\053\022\051\026\uffeb" +
    "\033\052\036\uffeb\001\002\000\006\026\uffec\036\uffec\001" +
    "\002\000\006\034\062\044\063\001\002\000\016\004\071" +
    "\006\070\011\065\012\066\027\064\032\067\001\002\000" +
    "\016\004\071\006\070\011\065\012\066\027\064\032\067" +
    "\001\002\000\006\004\113\005\114\001\002\000\020\034" +
    "\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\045\uffdf" +
    "\001\002\000\020\034\uffde\037\uffde\040\uffde\041\uffde\042" +
    "\uffde\043\uffde\045\uffde\001\002\000\020\034\uffdc\037\uffdc" +
    "\040\uffdc\041\uffdc\042\uffdc\043\uffdc\045\uffdc\001\002\000" +
    "\020\034\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0" +
    "\045\uffe0\001\002\000\020\034\uffdd\037\uffdd\040\uffdd\041" +
    "\uffdd\042\uffdd\043\uffdd\045\uffdd\001\002\000\012\034\074" +
    "\041\075\043\076\045\073\001\002\000\016\004\071\006" +
    "\070\011\065\012\066\027\064\032\067\001\002\000\016" +
    "\004\071\006\070\011\065\012\066\027\064\032\067\001" +
    "\002\000\022\004\uffe6\020\uffe6\021\uffe6\022\uffe6\026\uffe6" +
    "\030\uffe6\033\uffe6\036\uffe6\001\002\000\006\004\100\031" +
    "\077\001\002\000\020\034\uffe2\037\uffe2\040\uffe2\041\uffe2" +
    "\042\uffe2\043\uffe2\045\uffe2\001\002\000\004\035\101\001" +
    "\002\000\016\004\071\006\070\011\065\012\066\027\064" +
    "\032\067\001\002\000\014\034\074\040\uffd8\042\105\043" +
    "\076\045\073\001\002\000\004\040\104\001\002\000\020" +
    "\034\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\045" +
    "\uffe1\001\002\000\016\004\071\006\070\011\065\012\066" +
    "\027\064\032\067\001\002\000\004\040\uffd9\001\002\000" +
    "\012\034\074\040\uffd7\043\076\045\073\001\002\000\012" +
    "\034\074\037\111\043\076\045\073\001\002\000\020\034" +
    "\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\045\uffe3" +
    "\001\002\000\020\034\uffe4\037\uffe4\040\uffe4\041\uffe4\042" +
    "\uffe4\043\uffe4\045\uffe4\001\002\000\004\034\120\001\002" +
    "\000\004\034\115\001\002\000\016\004\071\006\070\011" +
    "\065\012\066\027\064\032\067\001\002\000\012\034\074" +
    "\037\117\043\076\045\073\001\002\000\020\034\uffdb\037" +
    "\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\045\uffdb\001\002" +
    "\000\004\037\121\001\002\000\020\034\uffda\037\uffda\040" +
    "\uffda\041\uffda\042\uffda\043\uffda\045\uffda\001\002\000\012" +
    "\034\074\037\123\043\076\045\073\001\002\000\004\044" +
    "\124\001\002\000\016\004\071\006\070\011\065\012\066" +
    "\027\064\032\067\001\002\000\012\034\074\041\126\043" +
    "\076\045\073\001\002\000\022\004\uffe5\020\uffe5\021\uffe5" +
    "\022\uffe5\026\uffe5\030\uffe5\033\uffe5\036\uffe5\001\002\000" +
    "\016\004\071\006\070\011\065\012\066\027\064\032\067" +
    "\001\002\000\012\034\074\041\131\043\076\045\073\001" +
    "\002\000\004\036\132\001\002\000\006\013\ufff5\036\ufff5" +
    "\001\002\000\016\004\071\006\070\011\065\012\066\027" +
    "\064\032\067\001\002\000\012\034\074\040\135\043\076" +
    "\045\073\001\002\000\014\004\061\020\055\021\053\022" +
    "\051\033\052\001\002\000\004\030\137\001\002\000\014" +
    "\004\061\020\055\021\053\022\051\033\052\001\002\000" +
    "\022\004\uffe9\020\uffe9\021\uffe9\022\uffe9\026\uffe9\030\uffe9" +
    "\033\uffe9\036\uffe9\001\002\000\016\004\071\006\070\011" +
    "\065\012\066\027\064\032\067\001\002\000\012\034\074" +
    "\040\143\043\076\045\073\001\002\000\014\004\061\020" +
    "\055\021\053\022\051\033\052\001\002\000\022\004\uffe8" +
    "\020\uffe8\021\uffe8\022\uffe8\026\uffe8\030\uffe8\033\uffe8\036" +
    "\uffe8\001\002\000\004\036\146\001\002\000\022\004\uffea" +
    "\020\uffea\021\uffea\022\uffea\026\uffea\030\uffea\033\uffea\036" +
    "\uffea\001\002\000\004\023\150\001\002\000\004\043\151" +
    "\001\002\000\004\024\152\001\002\000\004\035\153\001" +
    "\002\000\016\004\071\006\070\011\065\012\066\027\064" +
    "\032\067\001\002\000\012\034\074\040\155\043\076\045" +
    "\073\001\002\000\004\041\156\001\002\000\022\004\uffe7" +
    "\020\uffe7\021\uffe7\022\uffe7\026\uffe7\030\uffe7\033\uffe7\036" +
    "\uffe7\001\002\000\004\041\160\001\002\000\026\004\ufff8" +
    "\005\ufff8\007\ufff8\013\ufff8\020\ufff8\021\ufff8\022\ufff8\026" +
    "\ufff8\033\ufff8\036\ufff8\001\002\000\004\036\ufff7\001\002" +
    "\000\006\002\ufffb\025\ufffb\001\002\000\014\004\024\005" +
    "\027\007\026\013\025\036\ufff6\001\002\000\004\036\165" +
    "\001\002\000\006\002\ufffc\025\ufffc\001\002\000\004\002" +
    "\ufffe\001\002\000\004\002\001\001\002\000\004\033\171" +
    "\001\002\000\004\013\172\001\002\000\004\014\173\001" +
    "\002\000\004\015\174\001\002\000\004\016\175\001\002" +
    "\000\004\035\176\001\002\000\004\010\177\001\002\000" +
    "\004\034\200\001\002\000\004\037\201\001\002\000\004" +
    "\004\202\001\002\000\004\040\203\001\002\000\004\033" +
    "\204\001\002\000\014\004\061\020\055\021\053\022\051" +
    "\033\052\001\002\000\004\036\206\001\002\000\004\036" +
    "\207\001\002\000\006\002\uffff\025\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\006\002\004\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\007\005\006\001\001" +
    "\000\002\001\001\000\006\004\007\005\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\016\001" +
    "\001\000\012\006\022\010\020\011\017\015\021\001\001" +
    "\000\002\001\001\000\006\010\020\011\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\034\015\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\041\014\040\001\001" +
    "\000\004\015\043\001\001\000\002\001\001\000\006\013" +
    "\041\014\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\047\001" +
    "\001\000\012\006\022\015\021\016\056\017\055\001\001" +
    "\000\002\001\001\000\006\016\056\017\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\056\017\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\121\001\001\000\004" +
    "\020\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\111\001\001\000" +
    "\004\020\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\101\021" +
    "\102\001\001\000\004\022\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\133" +
    "\001\001\000\002\001\001\000\004\016\135\001\001\000" +
    "\002\001\001\000\004\016\137\001\001\000\002\001\001" +
    "\000\004\020\141\001\001\000\002\001\001\000\004\016" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\022\010\020\011\163\015\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }

 
  JavaLex lexer;
  public Parser(JavaLex lex) {
      super(lex);
      lexer = lex;

  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp_rest ::= COMMA exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_rest",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp_list ::= exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_list",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp_list ::= exp exp_rest 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_list",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= NEW IDENT LSQBRACKET RSQBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= NEW INT LSQBRACKET exp RSQBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= THIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= INT_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= exp PERIOD IDENT LPAREN exp_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= exp PERIOD LENGTH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= exp LSQBRACKET exp RSQBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= exp OP exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= IDENT LSQBRACKET exp RSQBRACKET EQUAL exp SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= IDENT EQUAL exp SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= WHILE LPAREN exp RPAREN statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= IF LPAREN exp RPAREN statement ELSE statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= LBRACE statements RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statements ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statements ::= statement statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= INT LSQBRACKET RSQBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formal_rest ::= COMMA type IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_rest",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formal_rests ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_rests",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formal_rests ::= formal_rest formal_rests 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_rests",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // formal_list ::= type IDENT formal_rests 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_list",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // method_decl ::= PUBLIC type IDENT LPAREN formal_list RPAREN LBRACE var_decls statements RETURN exp SEMICOLON RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_decl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // method_decls ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_decls",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // method_decls ::= method_decl method_decls 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_decls",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_decl ::= type IDENT SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_decl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_decls ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_decls",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_decls ::= var_decls var_decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_decls",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // class_decl ::= CLASS IDENT EXTENDS IDENT LBRACE var_decls method_decls RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_decl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class_decl ::= CLASS IDENT LBRACE var_decls method_decls RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_decl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class_decls ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_decls",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_decls ::= class_decl class_decls 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_decls",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main_class ::= CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LSQBRACKET RSQBRACKET IDENT RPAREN LBRACE statement RBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main_class",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // java_program ::= main_class class_decls 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("java_program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= java_program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

