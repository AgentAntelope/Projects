
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Oct 29 02:11:03 EDT 2012
//----------------------------------------------------

package tools;

import java_cup.runtime.Symbol;
import syntaxtree.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Oct 29 02:11:03 EDT 2012
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\004\000\002\002\004\000\002\017" +
    "\023\000\002\004\004\000\002\004\002\000\002\003\010" +
    "\000\002\003\012\000\002\016\004\000\002\016\002\000" +
    "\002\015\005\000\002\006\004\000\002\006\002\000\002" +
    "\005\017\000\002\007\005\000\002\007\002\000\002\010" +
    "\004\000\002\010\002\000\002\011\005\000\002\014\005" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\013\004\000\002\013\002\000\002\012\005\000\002" +
    "\012\011\000\002\012\007\000\002\012\013\000\002\012" +
    "\006\000\002\012\011\000\002\020\005\000\002\020\006" +
    "\000\002\020\005\000\002\020\010\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\007\000\002\020\006\000\002\021" +
    "\004\000\002\022\005\000\002\022\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\004\026\004\001\002\000\004\004\170\001" +
    "\002\000\004\002\167\001\002\000\006\002\ufffd\026\011" +
    "\001\002\000\004\002\000\001\002\000\006\002\ufffd\026" +
    "\011\001\002\000\004\004\012\001\002\000\006\020\014" +
    "\034\013\001\002\000\014\004\022\006\024\007\023\014" +
    "\ufff9\037\ufff9\001\002\000\004\004\015\001\002\000\004" +
    "\034\016\001\002\000\014\004\022\006\024\007\023\014" +
    "\ufff9\037\ufff9\001\002\000\006\014\ufff6\037\ufff6\001\002" +
    "\000\004\004\030\001\002\000\026\004\022\006\024\007" +
    "\023\014\ufff9\021\ufff9\022\ufff9\023\ufff9\027\ufff9\034\ufff9" +
    "\037\ufff9\001\002\000\004\004\uffec\001\002\000\004\004" +
    "\uffee\001\002\000\006\004\uffed\035\025\001\002\000\004" +
    "\040\026\001\002\000\004\004\uffef\001\002\000\022\004" +
    "\ufffa\014\ufffa\021\ufffa\022\ufffa\023\ufffa\027\ufffa\034\ufffa" +
    "\037\ufffa\001\002\000\004\042\031\001\002\000\026\004" +
    "\ufff8\006\ufff8\007\ufff8\014\ufff8\021\ufff8\022\ufff8\023\ufff8" +
    "\027\ufff8\034\ufff8\037\ufff8\001\002\000\006\014\035\037" +
    "\034\001\002\000\006\014\ufff7\037\ufff7\001\002\000\006" +
    "\002\ufffb\026\ufffb\001\002\000\010\004\022\006\024\007" +
    "\023\001\002\000\004\004\037\001\002\000\004\036\040" +
    "\001\002\000\012\004\022\006\024\007\023\041\ufff3\001" +
    "\002\000\004\041\052\001\002\000\004\004\043\001\002" +
    "\000\006\041\ufff1\043\044\001\002\000\010\004\022\006" +
    "\024\007\023\001\002\000\004\041\ufff4\001\002\000\006" +
    "\041\ufff1\043\044\001\002\000\004\041\ufff2\001\002\000" +
    "\004\004\051\001\002\000\006\041\ufff0\043\ufff0\001\002" +
    "\000\004\034\053\001\002\000\022\004\022\006\024\007" +
    "\023\021\ufff9\022\ufff9\023\ufff9\027\ufff9\034\ufff9\001\002" +
    "\000\016\004\061\021\063\022\062\023\057\027\uffea\034" +
    "\055\001\002\000\016\004\061\021\063\022\062\023\057" +
    "\034\055\037\uffea\001\002\000\004\027\155\001\002\000" +
    "\004\044\145\001\002\000\020\004\061\021\063\022\062" +
    "\023\057\027\uffea\034\055\037\uffea\001\002\000\006\035" +
    "\133\045\134\001\002\000\004\036\127\001\002\000\004" +
    "\036\064\001\002\000\016\004\072\011\066\012\070\013" +
    "\071\030\065\033\067\001\002\000\006\004\120\006\121" +
    "\001\002\000\020\005\uffde\035\uffde\040\uffde\041\uffde\042" +
    "\uffde\043\uffde\044\uffde\001\002\000\020\005\uffdb\035\uffdb" +
    "\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\001\002\000" +
    "\020\005\uffdd\035\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd" +
    "\044\uffdd\001\002\000\020\005\uffdf\035\uffdf\040\uffdf\041" +
    "\uffdf\042\uffdf\043\uffdf\044\uffdf\001\002\000\020\005\uffdc" +
    "\035\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\001" +
    "\002\000\012\005\074\035\075\041\076\044\077\001\002" +
    "\000\016\004\072\011\066\012\070\013\071\030\065\033" +
    "\067\001\002\000\016\004\072\011\066\012\070\013\071" +
    "\030\065\033\067\001\002\000\014\004\061\021\063\022" +
    "\062\023\057\034\055\001\002\000\006\004\101\032\100" +
    "\001\002\000\020\005\uffe1\035\uffe1\040\uffe1\041\uffe1\042" +
    "\uffe1\043\uffe1\044\uffe1\001\002\000\004\036\102\001\002" +
    "\000\016\004\072\011\066\012\070\013\071\030\065\033" +
    "\067\001\002\000\014\005\074\035\075\041\uffd6\043\106" +
    "\044\077\001\002\000\004\041\105\001\002\000\020\005" +
    "\uffe0\035\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0" +
    "\001\002\000\016\004\072\011\066\012\070\013\071\030" +
    "\065\033\067\001\002\000\004\041\uffd8\001\002\000\014" +
    "\005\074\035\075\041\uffd6\043\106\044\077\001\002\000" +
    "\004\041\uffd7\001\002\000\004\031\113\001\002\000\014" +
    "\004\061\021\063\022\062\023\057\034\055\001\002\000" +
    "\022\004\uffe8\021\uffe8\022\uffe8\023\uffe8\027\uffe8\031\uffe8" +
    "\034\uffe8\037\uffe8\001\002\000\012\005\074\035\075\040" +
    "\116\044\077\001\002\000\020\005\uffe2\035\uffe2\040\uffe2" +
    "\041\uffe2\042\uffe2\043\uffe2\044\uffe2\001\002\000\020\005" +
    "\uffe3\035\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3" +
    "\001\002\000\004\036\125\001\002\000\004\035\122\001" +
    "\002\000\016\004\072\011\066\012\070\013\071\030\065" +
    "\033\067\001\002\000\012\005\074\035\075\040\124\044" +
    "\077\001\002\000\020\005\uffda\035\uffda\040\uffda\041\uffda" +
    "\042\uffda\043\uffda\044\uffda\001\002\000\004\041\126\001" +
    "\002\000\020\005\uffd9\035\uffd9\040\uffd9\041\uffd9\042\uffd9" +
    "\043\uffd9\044\uffd9\001\002\000\016\004\072\011\066\012" +
    "\070\013\071\030\065\033\067\001\002\000\012\005\074" +
    "\035\075\041\131\044\077\001\002\000\014\004\061\021" +
    "\063\022\062\023\057\034\055\001\002\000\022\004\uffe7" +
    "\021\uffe7\022\uffe7\023\uffe7\027\uffe7\031\uffe7\034\uffe7\037" +
    "\uffe7\001\002\000\016\004\072\011\066\012\070\013\071" +
    "\030\065\033\067\001\002\000\016\004\072\011\066\012" +
    "\070\013\071\030\065\033\067\001\002\000\012\005\074" +
    "\035\075\042\136\044\077\001\002\000\022\004\uffe5\021" +
    "\uffe5\022\uffe5\023\uffe5\027\uffe5\031\uffe5\034\uffe5\037\uffe5" +
    "\001\002\000\012\005\074\035\075\040\140\044\077\001" +
    "\002\000\004\045\141\001\002\000\016\004\072\011\066" +
    "\012\070\013\071\030\065\033\067\001\002\000\012\005" +
    "\074\035\075\042\143\044\077\001\002\000\022\004\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\027\uffe4\031\uffe4\034\uffe4\037" +
    "\uffe4\001\002\000\006\027\uffeb\037\uffeb\001\002\000\004" +
    "\024\146\001\002\000\004\044\147\001\002\000\004\025" +
    "\150\001\002\000\004\036\151\001\002\000\016\004\072" +
    "\011\066\012\070\013\071\030\065\033\067\001\002\000" +
    "\012\005\074\035\075\041\153\044\077\001\002\000\004" +
    "\042\154\001\002\000\022\004\uffe6\021\uffe6\022\uffe6\023" +
    "\uffe6\027\uffe6\031\uffe6\034\uffe6\037\uffe6\001\002\000\016" +
    "\004\072\011\066\012\070\013\071\030\065\033\067\001" +
    "\002\000\012\005\074\035\075\042\157\044\077\001\002" +
    "\000\004\037\160\001\002\000\006\014\ufff5\037\ufff5\001" +
    "\002\000\004\037\162\001\002\000\022\004\uffe9\021\uffe9" +
    "\022\uffe9\023\uffe9\027\uffe9\031\uffe9\034\uffe9\037\uffe9\001" +
    "\002\000\006\014\ufff6\037\ufff6\001\002\000\006\014\035" +
    "\037\165\001\002\000\006\002\ufffc\026\ufffc\001\002\000" +
    "\004\002\ufffe\001\002\000\004\002\001\001\002\000\004" +
    "\034\171\001\002\000\004\014\172\001\002\000\004\015" +
    "\173\001\002\000\004\016\174\001\002\000\004\017\175" +
    "\001\002\000\004\036\176\001\002\000\004\010\177\001" +
    "\002\000\004\035\200\001\002\000\004\040\201\001\002" +
    "\000\004\004\202\001\002\000\004\041\203\001\002\000" +
    "\004\034\204\001\002\000\016\004\061\021\063\022\062" +
    "\023\057\034\055\037\uffea\001\002\000\004\037\206\001" +
    "\002\000\004\037\207\001\002\000\006\002\uffff\026\uffff" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\006\002\004\017\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\007\004\006\001\001" +
    "\000\002\001\001\000\006\003\007\004\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\014\017\015\020" +
    "\016\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\017\015\020\016\016\001\001\000\004\006\031" +
    "\001\001\000\002\001\001\000\010\014\017\015\020\016" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\040\014\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\044\011\045\001\001\000\004\014\047" +
    "\001\001\000\002\001\001\000\006\010\046\011\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\014\017\015\020\016\053\001" +
    "\001\000\006\012\057\013\055\001\001\000\006\012\057" +
    "\013\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\057\013\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\116\001\001\000\004\020\114\001\001" +
    "\000\004\012\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\102\021\103\001\001" +
    "\000\004\022\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\107\001\001\000\002\001\001\000\004" +
    "\022\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\127\001\001\000\002\001\001\000\004\012\131" +
    "\001\001\000\002\001\001\000\004\020\136\001\001\000" +
    "\004\020\134\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\163\001" +
    "\001\000\004\005\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\057\013\204\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol tok = lexer.next_token(); System.out.println(tok); return tok; 
    }

 
  JavaLex lexer;
  public Parser(JavaLex lex) {
      super(lex);
      lexer = lex;

  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp_rest ::= 
            {
              ExpList RESULT =null;
		RESULT = new ExpList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_rest",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp_rest ::= COMMA exp exp_rest 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList eList = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		eList.addElement(e); RESULT = eList;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_rest",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp_list ::= exp exp_rest 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList eList = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		eList.addElement(e); RESULT = eList;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_list",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= NEW IDENT LPAREN RPAREN 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new NewObject(new Identifier(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= NEW INT LSQBRACKET exp RSQBRACKET 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new NewArray(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= THIS 
            {
              Exp RESULT =null;
		RESULT = new This();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= IDENT 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new IdentifierExp(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= FALSE 
            {
              Exp RESULT =null;
		RESULT = new False();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= TRUE 
            {
              Exp RESULT =null;
		RESULT = new True();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= INT_LIT 
            {
              Exp RESULT =null;
		int aileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int airight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer ai = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new IntegerLiteral(ai);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= exp PERIOD IDENT LPAREN exp_list RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpList eList = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Call(e, new Identifier(id), eList);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= exp PERIOD LENGTH 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new ArrayLength(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= exp LSQBRACKET exp RSQBRACKET 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ArrayLookup(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= exp OP exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            if(op.equalsIgnoreCase("and")){
                RESULT = new And(e1, e2);
            }
            else if(op.equalsIgnoreCase("minus")){
                RESULT = new Minus(e1, e2);
            }
            else if(op.equalsIgnoreCase("plus")){
                RESULT = new Plus(e1, e2);
            }
            else if(op.equalsIgnoreCase("<")){
                RESULT = new LessThan(e1, e2);
            }
            else if(op.equalsIgnoreCase("*")){
                RESULT = new Times(e1, e2);
            }
            else{
                System.out.println("NOT A REAL OP");
                System.exit(0);
            }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= IDENT LSQBRACKET exp RSQBRACKET EQUAL exp SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= IDENT EQUAL exp SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= WHILE LPAREN exp RPAREN statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= IF LPAREN exp RPAREN statement ELSE statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= LBRACE statements RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statements ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statements ::= statement statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= IDENT 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new IdentifierType(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= INT 
            {
              Type RESULT =null;
		RESULT = new IntegerType();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		RESULT = new BooleanType();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= INT LSQBRACKET RSQBRACKET 
            {
              Type RESULT =null;
		RESULT = new IntArrayType();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // formal_rest ::= COMMA type IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_rest",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formal_rests ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_rests",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formal_rests ::= formal_rest formal_rests 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_rests",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formal_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // formal_list ::= type IDENT formal_rests 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // method_decl ::= PUBLIC type IDENT LPAREN formal_list RPAREN LBRACE var_decls statements RETURN exp SEMICOLON RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // method_decls ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_decls",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // method_decls ::= method_decls method_decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_decls",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_decl ::= type IDENT SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new VarDecl(t, new Identifier(id));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_decl",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_decls ::= 
            {
              VarDeclList RESULT =null;
		RESULT = new VarDeclList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_decls",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_decls ::= var_decl var_decls 
            {
              VarDeclList RESULT =null;
		int curlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int curlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDecl curlist = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int itemleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDeclList item = (VarDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		curlist.addElement(item); RESULT = curlist;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_decls",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // class_decl ::= CLASS IDENT EXTENDS IDENT LBRACE var_decls method_decls RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_decl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class_decl ::= CLASS IDENT LBRACE var_decls method_decls RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_decl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class_decls ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_decls",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_decls ::= class_decl class_decls 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_decls",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main_class ::= CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LSQBRACKET RSQBRACKET IDENT RPAREN LBRACE statements RBRACE RBRACE 
            {
              MainClass RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new MainClass(new Identifier(id1), new Identifier(id2), as);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main_class",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // java_program ::= main_class class_decls 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("java_program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= java_program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

