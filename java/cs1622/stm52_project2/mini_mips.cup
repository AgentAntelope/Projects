import java_cup.runtime.Symbol;
import parser.instructions.*;
import parser.InstructionAssembler;
import parser.Immediate;
/* Preliminaries to use the scanner.  */
scan with {: return lexer.next_token(); :};

parser code {: 
  MipsLex lexer;
  public InstructionAssembler assembler;
  public parser(MipsLex lex) {
      super(lex);
      lexer = lex;
      assembler = new InstructionAssembler();

  }
  public InstructionAssembler getAssembler(){
  	return assembler;
  }
:}; 

terminal String REGISTER, LABEL;
terminal String J_OPT, R_OPT, I_OPT;
terminal String IMMEDIATE;
terminal String STRING;

terminal LPAREN, RPAREN;
terminal TEXT, DATA;
terminal Integer INT;
terminal NEWLINE;
terminal EOL;
terminal COLON;
terminal ASCIIZ;

non terminal String optional_label;
non terminal instruction_list;
non terminal Instruction instruction;
non terminal mips_program;
non terminal data_section;
non terminal text_section;
non terminal string_list;
non terminal string_declaration;

start with mips_program;
mips_program ::= data_section text_section
					;

data_section ::= DATA string_list
			 		|
			 		;
string_list ::=	 string_list string_declaration
					|
					;
string_declaration ::=	optional_label:label ASCIIZ STRING:str
					{:parser.assembler.addData(label, str);:}
					|
					STRING: str;
optional_label ::= LABEL:label
					{:RESULT = label;:}
					|
					{:RESULT = null;:}
					;

text_section ::= TEXT instruction_list;
instruction_list ::= instruction_list instruction:ins
					{:parser.assembler.addInstruction(ins);:}
					| instruction_list LABEL:label instruction:ins
					{: parser.assembler.addInstruction(label, ins); :}
					|
					;
instruction 	 ::= R_OPT:opt REGISTER:rs REGISTER:rt REGISTER:rd
					{: RESULT = new RInstruction(opt, rs, rt, rd);:}
					| R_OPT:opt
					{: RESULT = new RInstruction(opt); :}
					| R_OPT:opt REGISTER:rt REGISTER:rs INT:i
					{: RESULT = new RInstruction(opt, rt, rs, i);:}
					| I_OPT:opt REGISTER:rt REGISTER:rs IMMEDIATE:imm
					{:  RESULT = new IInstruction(opt, rt, rs, new Immediate(imm)); :}
					| I_OPT:opt REGISTER:rt REGISTER:rs INT:i
					{: RESULT = new IInstruction(opt, rt, rs, new Immediate(i)); :}
					| I_OPT:opt REGISTER:rt IMMEDIATE:imm
					{: RESULT = new IInstruction(opt, rt, new Immediate(imm)); :}
					| I_OPT:opt REGISTER:rt INT:i LPAREN REGISTER:rs RPAREN
					{:  RESULT = new IInstruction(opt, rt, rs, new Immediate(i)); :}
					| J_OPT:opt IMMEDIATE:imm
					{: RESULT = new JInstruction(opt, new Immediate(imm));:}
					;