import java_cup.runtime.Symbol;
import parser.instructions.*;
import parser.InstructionAssembler;
import parser.Immediate;
/* Preliminaries to use the scanner.  */
scan with {: return lexer.next_token(); :};

parser code {: 
  MipsLex lexer;
  public InstructionAssembler assembler;
  public parser(MipsLex lex) {
      super(lex);
      lexer = lex;
      assembler = new InstructionAssembler();

  }
  public InstructionAssembler getAssembler(){
  	return assembler;
  }
:}; 

terminal String REGISTER, LABEL;
terminal String ADD, ADDI, BEQ, JUMP, SB, LB, RAND, DISPL, SLT, XOR, SUB, HALT, DISP;
terminal String IMMEDIATE;

terminal LPAREN, RPAREN;
terminal Integer INT;

non terminal String optional_label;
non terminal instruction_list;
non terminal Instruction instruction;
non terminal mips_program;
non terminal text_section;

start with mips_program;
mips_program ::= text_section
			;

text_section ::= instruction_list;
instruction_list ::= instruction_list instruction:ins
					{:parser.assembler.addInstruction(ins);:}
					| instruction_list LABEL:label instruction:ins
					{: parser.assembler.addInstruction(label, ins); :}
					|
					;
instruction 	 ::=                    ADD:opt REGISTER:rs REGISTER:rt REGISTER:rd
					{: RESULT = new ADD(rs, rt, rd);:}
					| SUB:opt REGISTER:rs REGISTER:rt REGISTER:rd
					{:RESULT = new SUB(rs, rt, rd);:}
					| SLT:opt REGISTER:rs REGISTER:rt REGISTER:rd
					{: RESULT = new SLT(rs, rt, rd);:} 
					| ADDI:opt REGISTER:rt REGISTER:rs INT:imm
					{: RESULT = new ADDI(rt, rs, imm); :}
					| BEQ REGISTER:rs REGISTER:rt IMMEDIATE:imm
					{: RESULT = new BEQ(rs, rt, imm); :}
					| XOR REGISTER:rs REGISTER:rt REGISTER:rd
					{:RESULT = new XOR(rs, rt, rd);:}
					| SB REGISTER:rs INT:imm LPAREN REGISTER:rt RPAREN
					{:RESULT = new SB(rs, rt, imm);:}
					| JUMP IMMEDIATE:imm
					{:RESULT = new JUMP(imm);:}
					| LB REGISTER:rs INT:imm LPAREN REGISTER:rt RPAREN
					{:RESULT = new LB(rs, rt, imm);:}
					| RAND REGISTER:rs REGISTER:rt
					{:RESULT = new RAND(rs, rt);:}
					| DISP REGISTER:rs
					{:RESULT = new DISP(rs);:}
					| HALT
					;
