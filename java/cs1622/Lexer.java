/* The following code was generated by JFlex 1.4.3 on 22/09/12 3:27 PM */

/* JFlex example: part of Java language lexer specification */
import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 22/09/12 3:27 PM from the specification file
 * <tt>jflex.yy</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ELSE = 4;
  public static final int BLOCK_COMMENT = 12;
  public static final int YYINITIAL = 0;
  public static final int LINE_OUT_BLOCK_COMMENT = 8;
  public static final int IF_WHILE = 2;
  public static final int BLOCK_COMMENT_RETURN = 10;
  public static final int LINE_OUT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\4\2\0\1\6\22\0\1\5\1\50\5\0\1\7"+
    "\1\45\1\47\1\17\1\41\1\52\1\10\1\12\1\3\1\11\11\2"+
    "\1\0\1\44\1\41\1\42\1\41\2\0\22\1\1\26\7\1\1\33"+
    "\1\0\1\34\1\0\1\1\1\0\1\15\1\23\1\13\1\31\1\25"+
    "\1\51\1\30\1\37\1\20\2\1\1\14\1\1\1\21\1\24\1\35"+
    "\1\1\1\27\1\16\1\22\1\32\1\36\1\40\3\1\1\43\1\0"+
    "\1\46\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\15\0\2\1\1\0\2\2\1\0\1\3\1\1\1\4"+
    "\13\1\1\5\1\6\3\1\1\3\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\13\2\2\1\16\1\17"+
    "\1\0\2\20\1\21\1\22\1\21\1\3\7\20\1\3"+
    "\12\0\1\23\2\0\1\24\2\0\5\1\1\25\6\1"+
    "\1\26\3\1\2\0\1\27\1\0\1\30\1\31\1\0"+
    "\1\32\1\0\1\33\2\0\1\34\1\35\1\0\1\36"+
    "\2\0\1\37\1\40\1\41\4\20\1\42\4\0\2\1"+
    "\1\0\4\1\2\43\10\1\2\0\1\44\1\0\4\20"+
    "\4\0\4\1\1\0\1\45\1\1\1\46\4\1\2\0"+
    "\4\20\4\0\3\1\1\45\1\43\4\1\2\0\4\20"+
    "\3\0\1\1\1\0\1\1\1\27\1\0\1\47\1\20"+
    "\1\0\1\1\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a\0\u0285"+
    "\0\u02b0\0\u02db\0\u0306\0\u02b0\0\u0331\0\u02b0\0\u035c\0\u0387"+
    "\0\u03b2\0\u03dd\0\u0408\0\u0433\0\u045e\0\u0489\0\u04b4\0\u04df"+
    "\0\u050a\0\u0535\0\u02b0\0\u0560\0\u058b\0\u05b6\0\u05e1\0\u060c"+
    "\0\u0637\0\u0662\0\u068d\0\u06b8\0\u02b0\0\u02b0\0\u06e3\0\u070e"+
    "\0\u0739\0\u060c\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u02b0\0\u02b0"+
    "\0\u0810\0\u083b\0\u0866\0\u0891\0\u08bc\0\u08e7\0\u0912\0\u093d"+
    "\0\u0968\0\u0993\0\u02b0\0\u09be\0\u09e9\0\u0a14\0\u0a3f\0\u0a6a"+
    "\0\u0a95\0\u0ac0\0\u0aeb\0\u0b16\0\u02b0\0\u0b41\0\u0b6c\0\u02b0"+
    "\0\u0b97\0\u0bc2\0\u0bed\0\u0c18\0\u0c43\0\u0c6e\0\u0c99\0\u022f"+
    "\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45\0\u0d70\0\u0d9b\0\u02b0\0\u0dc6"+
    "\0\u0df1\0\u0e1c\0\u0e47\0\u060c\0\u02b0\0\u0637\0\u02b0\0\u0e72"+
    "\0\u068d\0\u02b0\0\u06b8\0\u02b0\0\u0e9d\0\u06e3\0\u02b0\0\u0e9d"+
    "\0\u070e\0\u070e\0\u0ec8\0\u0764\0\u02b0\0\u02b0\0\u02b0\0\u0ef3"+
    "\0\u0f1e\0\u0f49\0\u0f74\0\u02b0\0\u0f9f\0\u0fca\0\u0ff5\0\u1020"+
    "\0\u104b\0\u02b0\0\u1076\0\u10a1\0\u10cc\0\u10f7\0\u1122\0\u114d"+
    "\0\u022f\0\u1178\0\u11a3\0\u11ce\0\u11f9\0\u1224\0\u124f\0\u127a"+
    "\0\u12a5\0\u12d0\0\u0e72\0\u02b0\0\u12fb\0\u1326\0\u1351\0\u137c"+
    "\0\u13a7\0\u13d2\0\u13fd\0\u1428\0\u1453\0\u147e\0\u14a9\0\u14d4"+
    "\0\u14ff\0\u152a\0\u1555\0\u1580\0\u022f\0\u15ab\0\u15d6\0\u1601"+
    "\0\u162c\0\u1657\0\u1682\0\u16ad\0\u16d8\0\u1703\0\u172e\0\u1759"+
    "\0\u1784\0\u17af\0\u17da\0\u1805\0\u1830\0\u185b\0\u02b0\0\u1886"+
    "\0\u18b1\0\u18dc\0\u1907\0\u1932\0\u195d\0\u1988\0\u19b3\0\u19de"+
    "\0\u1a09\0\u1a34\0\u1a5f\0\u1a8a\0\u1ab5\0\u1ae0\0\u1b0b\0\u1b36"+
    "\0\u12d0\0\u1b61\0\u12fb\0\u1b8c\0\u1bb7\0\u1be2\0\u02b0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\16\1\17\1\20\2\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\24\1\33"+
    "\1\34\1\16\1\35\1\16\1\36\1\37\1\40\1\16"+
    "\1\41\1\16\1\42\1\43\1\44\1\45\1\16\1\46"+
    "\1\24\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\16\1\56\1\0\1\16\1\17\1\20\2\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\24\1\33\1\34\1\16\1\35\1\16\1\36\1\37"+
    "\1\40\1\16\1\41\1\16\1\42\1\43\1\44\1\45"+
    "\1\16\1\46\1\24\1\47\1\50\1\51\1\52\1\53"+
    "\1\57\1\55\1\16\1\56\1\0\1\16\1\17\1\20"+
    "\2\60\1\61\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\24\1\33\1\34\1\16\1\35\1\16"+
    "\1\36\1\37\1\40\1\16\1\41\1\16\1\42\1\43"+
    "\1\44\1\45\1\16\1\46\1\24\1\47\1\62\1\51"+
    "\1\52\1\53\1\54\1\55\1\16\1\56\1\0\1\16"+
    "\1\17\1\20\2\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\24\1\33\1\34\1\16"+
    "\1\35\1\16\1\36\1\37\1\40\1\16\1\41\1\16"+
    "\1\42\1\43\1\44\1\45\1\16\1\46\1\24\1\47"+
    "\1\50\1\63\1\52\1\53\1\54\1\55\1\16\1\56"+
    "\1\0\1\16\1\17\1\64\2\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\24\1\33"+
    "\1\34\1\16\1\35\1\16\1\36\1\37\1\40\1\16"+
    "\1\41\1\16\1\42\1\43\1\44\1\45\1\16\1\46"+
    "\1\24\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\16\1\56\1\65\1\66\1\65\1\20\1\67\1\70"+
    "\1\71\4\65\4\66\1\72\1\73\2\66\1\74\2\66"+
    "\1\75\2\66\1\76\1\66\2\65\4\66\2\65\1\77"+
    "\1\100\1\52\1\101\1\54\1\65\1\66\2\65\1\66"+
    "\1\65\1\20\1\67\1\70\1\71\4\65\4\66\1\102"+
    "\1\73\2\66\1\74\2\66\1\75\2\66\1\76\1\66"+
    "\2\65\4\66\2\65\1\77\1\100\1\52\1\101\1\54"+
    "\1\65\1\66\1\65\4\0\2\103\1\104\110\0\1\105"+
    "\26\0\1\106\2\0\1\107\2\0\1\110\2\0\1\111"+
    "\54\0\1\112\20\0\1\113\11\0\4\113\1\0\13\113"+
    "\2\0\4\113\10\0\1\113\44\0\1\112\10\0\2\16"+
    "\1\0\3\114\2\0\1\16\1\0\4\16\1\0\13\16"+
    "\2\0\4\16\2\0\1\115\5\0\1\16\3\0\1\17"+
    "\6\0\1\17\1\116\43\0\1\117\13\0\1\120\112\0"+
    "\1\21\55\0\1\121\1\122\54\0\1\116\41\0\2\16"+
    "\1\0\3\114\2\0\1\16\1\0\1\16\1\123\2\16"+
    "\1\0\13\16\2\0\4\16\2\0\1\115\5\0\1\16"+
    "\2\0\2\16\1\0\3\114\2\0\1\16\1\0\4\16"+
    "\1\0\5\16\1\124\5\16\2\0\4\16\2\0\1\115"+
    "\5\0\1\16\2\0\2\16\1\0\3\114\2\0\1\16"+
    "\1\0\4\16\1\0\3\16\1\125\7\16\2\0\4\16"+
    "\2\0\1\115\5\0\1\16\2\0\2\16\1\0\3\114"+
    "\2\0\1\16\1\0\4\16\1\0\2\16\1\126\10\16"+
    "\2\0\4\16\2\0\1\115\5\0\1\16\2\0\2\16"+
    "\1\0\3\114\2\0\1\16\1\0\4\16\1\0\1\16"+
    "\1\127\11\16\2\0\4\16\2\0\1\115\5\0\1\130"+
    "\2\0\2\16\1\0\3\114\2\0\1\16\1\0\4\16"+
    "\1\0\5\16\1\131\5\16\2\0\4\16\2\0\1\115"+
    "\5\0\1\16\2\0\2\16\1\0\3\114\2\0\1\16"+
    "\1\0\4\16\1\0\4\16\1\132\6\16\2\0\4\16"+
    "\2\0\1\115\5\0\1\16\2\0\2\16\1\0\3\114"+
    "\2\0\1\16\1\0\1\16\1\133\2\16\1\0\13\16"+
    "\2\0\4\16\2\0\1\115\5\0\1\16\2\0\2\16"+
    "\1\0\3\114\2\0\1\16\1\0\4\16\1\0\2\16"+
    "\1\134\10\16\2\0\4\16\2\0\1\115\5\0\1\16"+
    "\2\0\2\16\1\0\3\114\2\0\1\16\1\0\4\16"+
    "\1\0\5\16\1\135\5\16\2\0\4\16\2\0\1\115"+
    "\5\0\1\16\2\0\2\16\1\0\3\114\2\0\1\16"+
    "\1\0\4\16\1\0\4\16\1\136\6\16\2\0\4\16"+
    "\2\0\1\115\5\0\1\16\35\0\1\137\17\0\2\16"+
    "\1\0\3\114\2\0\1\16\1\0\4\16\1\0\12\16"+
    "\1\140\2\0\4\16\2\0\1\115\5\0\1\16\2\0"+
    "\2\16\1\0\3\114\2\0\1\16\1\0\4\16\1\0"+
    "\4\16\1\141\6\16\2\0\4\16\2\0\1\115\5\0"+
    "\1\16\2\0\2\16\1\0\3\114\2\0\1\16\1\0"+
    "\4\16\1\0\13\16\2\0\2\16\1\142\1\16\2\0"+
    "\1\115\5\0\1\16\43\0\1\24\13\0\1\143\3\144"+
    "\37\0\1\145\10\0\3\146\37\0\1\147\53\0\1\150"+
    "\7\0\3\151\37\0\1\152\10\0\3\153\34\0\1\154"+
    "\7\0\4\155\3\156\34\155\1\157\1\160\2\155\1\0"+
    "\3\155\4\161\1\0\37\161\1\162\12\161\1\60\37\161"+
    "\1\162\6\161\3\0\1\163\3\164\37\0\1\165\7\0"+
    "\1\117\13\0\1\166\33\0\3\65\4\0\10\65\1\0"+
    "\25\65\1\0\1\65\1\0\4\65\2\66\1\0\3\114"+
    "\2\65\1\66\1\65\4\66\1\0\13\66\2\65\4\66"+
    "\4\65\1\0\1\65\1\0\1\65\1\66\1\65\4\0"+
    "\1\67\51\0\1\167\47\0\1\65\2\66\1\0\3\114"+
    "\2\65\1\66\1\65\4\66\1\0\1\66\1\170\11\66"+
    "\2\65\4\66\4\65\1\0\1\65\1\0\1\65\1\66"+
    "\2\65\2\66\1\0\3\114\2\65\1\66\1\65\4\66"+
    "\1\0\4\66\1\171\6\66\2\65\4\66\4\65\1\0"+
    "\1\65\1\0\1\65\1\66\2\65\2\66\1\0\3\114"+
    "\2\65\1\66\1\65\4\66\1\0\2\66\1\172\10\66"+
    "\2\65\4\66\4\65\1\0\1\65\1\0\1\65\1\66"+
    "\2\65\2\66\1\0\3\114\2\65\1\66\1\65\4\66"+
    "\1\0\4\66\1\173\6\66\2\65\4\66\4\65\1\0"+
    "\1\65\1\0\1\65\1\66\4\65\1\143\3\144\10\65"+
    "\1\0\25\65\1\0\1\65\1\0\6\65\1\0\3\146"+
    "\10\65\1\0\25\65\1\0\1\65\1\0\6\65\1\0"+
    "\3\151\10\65\1\0\25\65\1\0\1\65\1\0\3\65"+
    "\3\0\1\174\53\0\1\103\46\0\4\105\1\0\46\105"+
    "\21\0\1\175\55\0\1\176\50\0\1\177\54\0\1\200"+
    "\32\0\3\112\45\0\2\113\6\0\1\113\1\0\4\113"+
    "\1\0\13\113\2\0\4\113\10\0\1\113\5\0\3\114"+
    "\34\0\1\115\11\0\1\201\6\0\1\202\41\0\4\117"+
    "\1\21\46\117\2\0\1\17\4\0\1\121\1\0\1\25"+
    "\50\0\1\203\44\0\2\16\1\0\3\114\2\0\1\16"+
    "\1\0\2\16\1\204\1\16\1\0\13\16\2\0\4\16"+
    "\2\0\1\115\5\0\1\16\2\0\2\16\1\0\3\114"+
    "\2\0\1\16\1\0\4\16\1\0\1\16\1\205\11\16"+
    "\2\0\4\16\2\0\1\115\5\0\1\16\2\0\2\16"+
    "\1\0\3\114\2\0\1\16\1\0\3\16\1\206\1\0"+
    "\13\16\2\0\4\16\2\0\1\115\5\0\1\16\2\0"+
    "\2\16\1\0\3\114\2\0\1\16\1\0\2\16\1\207"+
    "\1\16\1\0\13\16\2\0\4\16\2\0\1\115\5\0"+
    "\1\16\2\0\2\16\1\0\3\114\2\0\1\16\1\0"+
    "\4\16\1\0\2\16\1\210\10\16\2\0\4\16\2\0"+
    "\1\115\5\0\1\16\2\0\2\16\1\0\3\114\2\0"+
    "\1\16\1\0\4\16\1\0\13\16\2\0\3\16\1\211"+
    "\2\0\1\115\5\0\1\16\2\0\2\16\1\0\3\114"+
    "\2\0\1\16\1\0\4\16\1\0\4\16\1\212\6\16"+
    "\2\0\4\16\2\0\1\115\5\0\1\16\2\0\2\16"+
    "\1\0\3\114\2\0\1\16\1\0\3\16\1\213\1\0"+
    "\13\16\2\0\4\16\2\0\1\115\5\0\1\16\2\0"+
    "\2\16\1\0\3\114\2\0\1\16\1\0\4\16\1\0"+
    "\7\16\1\214\3\16\2\0\4\16\2\0\1\115\5\0"+
    "\1\16\2\0\2\16\1\0\3\114\2\0\1\16\1\0"+
    "\4\16\1\0\2\16\1\215\10\16\2\0\4\16\2\0"+
    "\1\115\5\0\1\16\2\0\2\16\1\0\3\114\2\0"+
    "\1\16\1\0\4\16\1\0\12\16\1\216\2\0\4\16"+
    "\2\0\1\115\5\0\1\16\2\0\2\16\1\0\3\114"+
    "\2\0\1\16\1\0\4\16\1\0\3\16\1\217\7\16"+
    "\2\0\4\16\2\0\1\115\5\0\1\16\2\0\2\16"+
    "\1\0\3\114\2\0\1\16\1\0\4\16\1\0\1\220"+
    "\12\16\2\0\4\16\2\0\1\115\5\0\1\16\2\0"+
    "\2\16\1\0\3\114\2\0\1\16\1\0\4\16\1\0"+
    "\1\221\12\16\2\0\4\16\2\0\1\115\5\0\1\16"+
    "\20\0\1\222\37\0\3\223\34\0\1\224\7\0\43\155"+
    "\1\0\1\160\2\155\1\0\3\155\17\0\1\225\33\0"+
    "\1\65\2\66\1\0\3\114\2\65\1\66\1\65\4\66"+
    "\1\0\2\66\1\226\10\66\2\65\4\66\4\65\1\0"+
    "\1\65\1\0\1\65\1\66\2\65\2\66\1\0\3\114"+
    "\2\65\1\66\1\65\4\66\1\0\4\66\1\227\6\66"+
    "\2\65\4\66\4\65\1\0\1\65\1\0\1\65\1\66"+
    "\2\65\2\66\1\0\3\114\2\65\1\66\1\65\4\66"+
    "\1\0\7\66\1\230\3\66\2\65\4\66\4\65\1\0"+
    "\1\65\1\0\1\65\1\66\2\65\2\66\1\0\3\114"+
    "\2\65\1\66\1\65\4\66\1\0\12\66\1\231\2\65"+
    "\4\66\4\65\1\0\1\65\1\0\1\65\1\66\1\65"+
    "\22\0\1\232\54\0\1\233\55\0\1\234\55\0\1\235"+
    "\22\0\1\201\6\0\1\201\43\0\1\17\6\0\1\25"+
    "\42\0\2\16\1\0\3\114\2\0\1\16\1\0\3\16"+
    "\1\236\1\0\13\16\2\0\4\16\2\0\1\115\5\0"+
    "\1\16\2\0\2\16\1\0\3\114\2\0\1\16\1\0"+
    "\4\16\1\0\10\16\1\237\2\16\2\0\4\16\2\0"+
    "\1\115\5\0\1\16\2\0\2\16\1\0\3\114\2\0"+
    "\1\16\1\0\4\16\1\0\2\16\1\240\10\16\2\0"+
    "\4\16\2\0\1\115\5\0\1\16\2\0\2\16\1\0"+
    "\3\114\2\0\1\16\1\0\4\16\1\0\2\16\1\241"+
    "\10\16\2\0\4\16\2\0\1\115\5\0\1\16\2\0"+
    "\2\16\1\0\3\242\2\0\1\16\1\0\4\16\1\0"+
    "\13\16\1\243\1\0\4\16\2\0\1\115\5\0\1\16"+
    "\2\0\2\16\1\0\3\114\2\0\1\16\1\0\1\16"+
    "\1\244\2\16\1\0\13\16\2\0\4\16\2\0\1\115"+
    "\5\0\1\16\2\0\2\16\1\0\3\114\2\0\1\16"+
    "\1\0\4\16\1\0\5\16\1\245\5\16\2\0\4\16"+
    "\2\0\1\115\5\0\1\16\2\0\2\16\1\0\3\114"+
    "\2\0\1\16\1\0\4\16\1\0\1\246\12\16\2\0"+
    "\4\16\2\0\1\115\5\0\1\16\2\0\2\16\1\0"+
    "\3\114\2\0\1\16\1\0\4\16\1\0\12\16\1\247"+
    "\2\0\4\16\2\0\1\115\5\0\1\16\2\0\2\16"+
    "\1\0\3\114\2\0\1\16\1\0\4\16\1\0\3\16"+
    "\1\250\7\16\2\0\4\16\2\0\1\115\5\0\1\16"+
    "\2\0\2\16\1\0\3\114\2\0\1\16\1\0\1\16"+
    "\1\241\2\16\1\0\13\16\2\0\4\16\2\0\1\115"+
    "\5\0\1\16\2\0\2\16\1\0\3\114\2\0\1\16"+
    "\1\0\4\16\1\0\11\16\1\211\1\16\2\0\4\16"+
    "\2\0\1\115\5\0\1\16\2\0\2\16\1\0\3\114"+
    "\2\0\1\16\1\0\1\16\1\251\2\16\1\0\13\16"+
    "\2\0\4\16\2\0\1\115\5\0\1\16\1\0\4\222"+
    "\1\0\12\222\1\252\33\222\4\225\1\0\12\225\1\253"+
    "\33\225\1\65\2\66\1\0\3\242\2\65\1\66\1\65"+
    "\4\66\1\0\13\66\1\254\1\65\4\66\4\65\1\0"+
    "\1\65\1\0\1\65\1\66\2\65\2\66\1\0\3\114"+
    "\2\65\1\66\1\65\1\66\1\255\2\66\1\0\13\66"+
    "\2\65\4\66\4\65\1\0\1\65\1\0\1\65\1\66"+
    "\2\65\2\66\1\0\3\114\2\65\1\66\1\65\4\66"+
    "\1\0\1\256\12\66\2\65\4\66\4\65\1\0\1\65"+
    "\1\0\1\65\1\66\2\65\2\66\1\0\3\114\2\65"+
    "\1\66\1\65\4\66\1\0\3\66\1\257\7\66\2\65"+
    "\4\66\4\65\1\0\1\65\1\0\1\65\1\66\1\65"+
    "\33\0\1\260\33\0\1\261\56\0\1\262\55\0\1\263"+
    "\30\0\2\16\1\0\3\114\2\0\1\16\1\0\3\16"+
    "\1\211\1\0\13\16\2\0\4\16\2\0\1\115\5\0"+
    "\1\16\2\0\2\16\1\0\3\114\2\0\1\16\1\0"+
    "\4\16\1\0\2\16\1\264\10\16\2\0\4\16\2\0"+
    "\1\115\5\0\1\16\2\0\2\16\1\0\3\114\2\0"+
    "\1\16\1\0\4\16\1\0\7\16\1\265\3\16\2\0"+
    "\4\16\2\0\1\115\5\0\1\16\2\0\2\16\1\0"+
    "\3\114\2\0\1\16\1\0\4\16\1\0\1\266\12\16"+
    "\2\0\4\16\2\0\1\115\5\0\1\16\5\0\3\242"+
    "\24\0\1\267\7\0\1\115\43\0\1\270\17\0\2\16"+
    "\1\0\3\114\2\0\1\16\1\0\4\16\1\0\5\16"+
    "\1\271\5\16\2\0\4\16\2\0\1\115\5\0\1\16"+
    "\2\0\2\16\1\0\3\114\2\0\1\16\1\0\4\16"+
    "\1\0\1\16\1\272\11\16\2\0\4\16\2\0\1\115"+
    "\5\0\1\16\2\0\2\16\1\0\3\114\2\0\1\16"+
    "\1\0\4\16\1\0\7\16\1\273\3\16\2\0\4\16"+
    "\2\0\1\115\5\0\1\16\2\0\2\16\1\0\3\114"+
    "\2\0\1\16\1\0\1\16\1\274\2\16\1\0\13\16"+
    "\2\0\4\16\2\0\1\115\5\0\1\16\2\0\2\16"+
    "\1\0\3\114\2\0\1\16\1\0\4\16\1\0\5\16"+
    "\1\130\5\16\2\0\4\16\2\0\1\115\5\0\1\16"+
    "\1\0\3\222\1\275\1\0\12\222\1\252\33\222\3\225"+
    "\1\276\1\0\12\225\1\253\33\225\3\65\4\0\10\65"+
    "\1\0\14\65\1\277\10\65\1\0\1\65\1\0\4\65"+
    "\2\66\1\0\3\114\2\65\1\66\1\65\4\66\1\0"+
    "\5\66\1\300\5\66\2\65\4\66\4\65\1\0\1\65"+
    "\1\0\1\65\1\66\2\65\2\66\1\0\3\114\2\65"+
    "\1\66\1\65\4\66\1\0\1\66\1\301\11\66\2\65"+
    "\4\66\4\65\1\0\1\65\1\0\1\65\1\66\2\65"+
    "\2\66\1\0\3\114\2\65\1\66\1\65\1\66\1\302"+
    "\2\66\1\0\13\66\2\65\4\66\4\65\1\0\1\65"+
    "\1\0\1\65\1\66\1\65\34\0\1\232\43\0\1\303"+
    "\46\0\1\304\45\0\1\305\37\0\2\16\1\0\3\114"+
    "\2\0\1\16\1\0\4\16\1\0\13\16\2\0\2\16"+
    "\1\211\1\16\2\0\1\115\5\0\1\16\2\0\2\16"+
    "\1\0\3\114\2\0\1\16\1\0\2\16\1\306\1\16"+
    "\1\0\13\16\2\0\4\16\2\0\1\115\5\0\1\16"+
    "\2\0\2\16\1\0\3\114\2\0\1\16\1\0\1\211"+
    "\3\16\1\0\13\16\2\0\4\16\2\0\1\115\5\0"+
    "\1\16\5\0\3\307\24\0\1\243\20\0\2\16\1\0"+
    "\3\114\2\0\1\16\1\0\2\16\1\310\1\16\1\0"+
    "\13\16\2\0\4\16\2\0\1\115\5\0\1\16\2\0"+
    "\2\16\1\0\3\114\2\0\1\16\1\0\4\16\1\0"+
    "\10\16\1\210\2\16\2\0\4\16\2\0\1\115\5\0"+
    "\1\16\2\0\2\16\1\0\3\114\2\0\1\16\1\0"+
    "\4\16\1\0\1\16\1\211\11\16\2\0\4\16\2\0"+
    "\1\115\5\0\1\16\2\0\2\16\1\0\3\114\2\0"+
    "\1\16\1\0\4\16\1\0\5\16\1\210\5\16\2\0"+
    "\4\16\2\0\1\115\5\0\1\16\1\0\4\222\1\144"+
    "\2\275\10\222\1\252\26\222\1\311\4\222\4\225\1\312"+
    "\2\276\10\225\1\253\26\225\1\313\4\225\3\65\1\0"+
    "\3\307\10\65\1\0\13\65\1\254\11\65\1\0\1\65"+
    "\1\0\4\65\2\66\1\0\3\114\2\65\1\66\1\65"+
    "\2\66\1\314\1\66\1\0\13\66\2\65\4\66\4\65"+
    "\1\0\1\65\1\0\1\65\1\66\2\65\2\66\1\0"+
    "\3\114\2\65\1\66\1\65\4\66\1\0\10\66\1\226"+
    "\2\66\2\65\4\66\4\65\1\0\1\65\1\0\1\65"+
    "\1\66\2\65\2\66\1\0\3\114\2\65\1\66\1\65"+
    "\4\66\1\0\5\66\1\226\5\66\2\65\4\66\4\65"+
    "\1\0\1\65\1\0\1\65\1\66\1\65\15\0\1\315"+
    "\65\0\1\232\47\0\1\232\26\0\2\16\1\0\3\114"+
    "\2\0\1\16\1\0\1\316\3\16\1\0\13\16\2\0"+
    "\4\16\2\0\1\115\5\0\1\16\5\0\3\307\24\0"+
    "\1\267\20\0\2\16\1\0\3\114\2\0\1\16\1\0"+
    "\4\16\1\0\1\16\1\210\11\16\2\0\4\16\2\0"+
    "\1\115\5\0\1\16\4\0\1\163\3\312\37\0\1\317"+
    "\4\0\1\65\2\66\1\0\3\114\2\65\1\66\1\65"+
    "\4\66\1\0\1\66\1\226\11\66\2\65\4\66\4\65"+
    "\1\0\1\65\1\0\1\65\1\66\1\65\21\0\1\232"+
    "\32\0\2\16\1\0\3\114\2\0\1\16\1\0\4\16"+
    "\1\0\2\16\1\211\10\16\2\0\4\16\2\0\1\115"+
    "\5\0\1\16\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7181];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\15\0\2\1\1\0\1\11\1\1\1\0\1\11\1\1"+
    "\1\11\14\1\1\11\11\1\2\11\5\1\1\0\2\1"+
    "\2\11\12\1\1\11\2\1\4\0\2\1\1\0\1\11"+
    "\2\0\1\11\2\0\14\1\1\11\3\1\2\0\1\11"+
    "\1\0\1\11\1\1\1\0\1\11\1\0\1\11\2\0"+
    "\1\11\1\1\1\0\1\1\2\0\3\11\4\1\1\11"+
    "\4\0\1\1\1\11\1\0\16\1\2\0\1\11\1\0"+
    "\5\1\3\0\4\1\1\0\7\1\2\0\4\1\4\0"+
    "\3\1\1\11\5\1\2\0\4\1\3\0\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
  int numTabs = 0;
  int columnCount = 0;
  public void printTabs(){
    for(int i = 0; i < numTabs; i++){
      System.out.print("\t");    
    }
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 124) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 21: 
          { yybegin(IF_WHILE);
                                          System.out.print(yytext());
          }
        case 40: break;
        case 5: 
          { System.out.print("[ ");
          }
        case 41: break;
        case 28: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { System.out.print(" )"); yybegin(YYINITIAL);
          }
        case 42: break;
        case 33: 
          { System.out.println("*/");
                                          numTabs--;
                                          printTabs();
                                          yybegin(YYINITIAL);
                                          columnCount = 0;
          }
        case 43: break;
        case 22: 
          { System.out.print("[]");
          }
        case 44: break;
        case 6: 
          { System.out.print(" ]");
          }
        case 45: break;
        case 10: 
          { System.out.println("}");
                                          printTabs();
          }
        case 46: break;
        case 32: 
          { System.out.print(yytext());
                                          yybegin(BLOCK_COMMENT_RETURN);
                                          columnCount = yycolumn;
          }
        case 47: break;
        case 27: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { System.out.print(" ) ");
          }
        case 48: break;
        case 34: 
          { System.out.println("*/"); printTabs(); 
                                          yybegin(YYINITIAL);
                                          columnCount = 0;
          }
        case 49: break;
        case 4: 
          { System.out.print(".");
          }
        case 50: break;
        case 16: 
          { System.out.print(yytext());
                                          columnCount += yytext().length();
                                          if(columnCount >= 80){
                                            System.out.println();
                                            columnCount = 0;
                                          }
          }
        case 51: break;
        case 17: 
          { System.out.print(yytext()); columnCount = 0;
          }
        case 52: break;
        case 36: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { System.out.print("() ");
          }
        case 53: break;
        case 29: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { System.out.print(" )\n"); numTabs++; printTabs(); yybegin(LINE_OUT);
          }
        case 54: break;
        case 3: 
          { System.out.print(" " + yytext() + " ");
          }
        case 55: break;
        case 37: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 9;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 10;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { System.out.print(yytext());
          }
        case 56: break;
        case 14: 
          { yybegin(YYINITIAL);
                                          System.out.print(" {\n");
                                          numTabs++;
                                          printTabs();
          }
        case 57: break;
        case 1: 
          { System.out.print(yytext());
          }
        case 58: break;
        case 7: 
          { System.out.print("{\n");
                                          numTabs++;
                                          printTabs();
          }
        case 59: break;
        case 26: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { System.out.println("}");
                                          numTabs--;
                                          printTabs();
          }
        case 60: break;
        case 18: 
          { System.out.print(yytext()); columnCount += 1;
          }
        case 61: break;
        case 8: 
          { System.out.println(";");
                                          printTabs();
          }
        case 62: break;
        case 30: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 7;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 8;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { System.out.println();
                                          numTabs++; 
                                          printTabs(); 
                                          yybegin(LINE_OUT);
          }
        case 63: break;
        case 39: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { System.out.print(";\n");
                                          numTabs-=1;
                                          printTabs();
                                          yybegin(LINE_OUT_BLOCK_COMMENT);
          }
        case 64: break;
        case 25: 
          { System.out.print("()");
          }
        case 65: break;
        case 23: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { System.out.print("{\n");
                                          printTabs();
          }
        case 66: break;
        case 24: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { System.out.println(";");
                                          numTabs--; 
                                          printTabs();
          }
        case 67: break;
        case 15: 
          { System.out.print(";\n");
                                          numTabs--;
                                          printTabs();
                                          yybegin(YYINITIAL);
          }
        case 68: break;
        case 38: 
          { yybegin(ELSE);
                                          System.out.print(yytext());
          }
        case 69: break;
        case 31: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { System.out.print(";\n");
                                          numTabs-=2;
                                          printTabs();
                                          yybegin(YYINITIAL);
          }
        case 70: break;
        case 19: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 11;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 12;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { System.out.print(yytext() + " ");
          }
        case 71: break;
        case 35: 
          { System.out.print(yytext() + " ");
          }
        case 72: break;
        case 11: 
          { System.out.print(" )");
          }
        case 73: break;
        case 13: 
          { System.out.print(", ");
          }
        case 74: break;
        case 20: 
          { System.out.print(yytext()); yybegin(BLOCK_COMMENT); columnCount = yycolumn;
          }
        case 75: break;
        case 12: 
          { System.out.print("!");
          }
        case 76: break;
        case 2: 
          { 
          }
        case 77: break;
        case 9: 
          { System.out.print("( ");
          }
        case 78: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return 1;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
