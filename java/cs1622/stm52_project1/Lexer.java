/* The following code was generated by JFlex 1.4.3 on 24/09/12 10:57 AM */

/* JFlex example: part of Java language lexer specification */
import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 24/09/12 10:57 AM from the specification file
 * <tt>pretty.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ELSE = 4;
  public static final int BLOCK_COMMENT = 12;
  public static final int YYINITIAL = 0;
  public static final int LINE_OUT_BLOCK_COMMENT = 8;
  public static final int IF_WHILE = 2;
  public static final int BLOCK_COMMENT_RETURN = 10;
  public static final int LINE_OUT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\4\2\0\1\6\22\0\1\5\1\45\5\0\1\7"+
    "\1\42\1\44\1\13\1\36\1\47\1\10\1\12\1\3\1\11\11\2"+
    "\1\0\1\41\1\36\1\37\1\36\2\0\22\1\1\24\7\1\1\31"+
    "\1\0\1\32\1\0\1\1\1\0\1\23\1\17\1\1\1\27\1\22"+
    "\1\46\1\26\1\34\1\14\2\1\1\21\1\1\1\15\1\20\1\1"+
    "\1\1\1\25\1\33\1\16\1\30\1\1\1\35\1\1\2\1\1\40"+
    "\1\0\1\43\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\16\0\2\1\1\0\2\2\1\0\1\3\1\1\1\4"+
    "\5\1\1\5\1\6\1\1\1\3\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\13\1\0\2\2\1\16"+
    "\1\17\1\0\2\20\1\21\1\22\1\21\1\3\10\20"+
    "\1\3\4\20\15\0\1\23\2\0\1\24\2\0\1\1"+
    "\1\25\4\1\1\26\1\1\2\0\1\27\2\0\1\30"+
    "\1\31\2\0\1\32\2\0\1\33\3\0\1\34\1\35"+
    "\2\0\1\36\2\0\1\37\1\40\2\0\1\41\4\20"+
    "\2\0\1\42\4\20\7\0\1\43\2\1\2\0\1\44"+
    "\5\1\5\0\1\45\6\0\1\46\4\20\1\0\1\47"+
    "\4\20\10\0\1\50\1\1\1\51\3\1\3\0\1\35"+
    "\3\0\4\20\2\0\3\20\6\0\1\50\1\44\3\1"+
    "\4\0\4\20\1\0\3\20\5\0\1\1\1\0\1\27"+
    "\3\0\1\52\2\20\5\0\1\52\5\0\1\27\1\52";

  private static int [] zzUnpackAction() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\u0118"+
    "\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230\0\u0258"+
    "\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\u02a8\0\u0320\0\u02a8\0\u0348"+
    "\0\u0370\0\u0398\0\u03c0\0\u03e8\0\u0410\0\u02a8\0\u0438\0\u0460"+
    "\0\u0488\0\u04b0\0\u04d8\0\u0500\0\u0528\0\u02a8\0\u02a8\0\u0550"+
    "\0\u0578\0\u05a0\0\u05c8\0\u0488\0\u05f0\0\u0618\0\u0640\0\u0668"+
    "\0\u02a8\0\u02a8\0\u0690\0\u06b8\0\u06e0\0\u0708\0\u0730\0\u0758"+
    "\0\u0780\0\u07a8\0\u07d0\0\u07f8\0\u0820\0\u0848\0\u0870\0\u0898"+
    "\0\u08c0\0\u08e8\0\u02a8\0\u0910\0\u0938\0\u0960\0\u0988\0\u09b0"+
    "\0\u09d8\0\u0a00\0\u0a28\0\u0a50\0\u0a78\0\u0aa0\0\u02a8\0\u0ac8"+
    "\0\u0af0\0\u02a8\0\u0b18\0\u0b40\0\u0b68\0\u0230\0\u0b90\0\u0bb8"+
    "\0\u0be0\0\u0c08\0\u02a8\0\u0c30\0\u0c58\0\u0488\0\u02a8\0\u0c80"+
    "\0\u04b0\0\u02a8\0\u0ca8\0\u0cd0\0\u0500\0\u02a8\0\u0cf8\0\u0528"+
    "\0\u02a8\0\u0d20\0\u0d48\0\u0550\0\u02a8\0\u0d20\0\u0d70\0\u05a0"+
    "\0\u05a0\0\u0d98\0\u05f0\0\u02a8\0\u02a8\0\u0dc0\0\u0de8\0\u02a8"+
    "\0\u0e10\0\u0e38\0\u0e60\0\u0e88\0\u0eb0\0\u0ed8\0\u02a8\0\u0f00"+
    "\0\u0f28\0\u0f50\0\u0f78\0\u0fa0\0\u0fc8\0\u0ff0\0\u1018\0\u1040"+
    "\0\u1068\0\u1090\0\u10b8\0\u10e0\0\u02a8\0\u1108\0\u1130\0\u1158"+
    "\0\u1180\0\u11a8\0\u11d0\0\u11f8\0\u1220\0\u1248\0\u1270\0\u1298"+
    "\0\u12c0\0\u0ca8\0\u02a8\0\u12e8\0\u1310\0\u1338\0\u1360\0\u1388"+
    "\0\u13b0\0\u13d8\0\u1400\0\u1428\0\u1450\0\u1478\0\u14a0\0\u14c8"+
    "\0\u14f0\0\u1518\0\u1540\0\u1568\0\u1590\0\u15b8\0\u15e0\0\u1608"+
    "\0\u1630\0\u1658\0\u1680\0\u16a8\0\u16d0\0\u16f8\0\u0230\0\u1720"+
    "\0\u1748\0\u1770\0\u1798\0\u17c0\0\u17e8\0\u1338\0\u1810\0\u1838"+
    "\0\u1860\0\u1888\0\u18b0\0\u18d8\0\u1900\0\u1928\0\u1950\0\u1978"+
    "\0\u19a0\0\u19c8\0\u19f0\0\u1a18\0\u1a40\0\u1a68\0\u1a90\0\u1ab8"+
    "\0\u02a8\0\u1ae0\0\u1b08\0\u1b30\0\u1b58\0\u1b80\0\u1ba8\0\u1bd0"+
    "\0\u1bf8\0\u1c20\0\u1c48\0\u1c70\0\u1c98\0\u1cc0\0\u1ce8\0\u1d10"+
    "\0\u1d38\0\u1d60\0\u1d88\0\u1db0\0\u1dd8\0\u1e00\0\u1e28\0\u1e50"+
    "\0\u1270\0\u1e78\0\u1ea0\0\u1ec8\0\u1388\0\u1ef0\0\u1f18\0\u1f40"+
    "\0\u1f68\0\u1f90\0\u1fb8\0\u1fe0\0\u02a8\0\u2008\0\u2030\0\u2058"+
    "\0\u2080\0\u20a8\0\u1f90\0\u1fb8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\17\1\20\1\21\2\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\25\1\30\2\17\1\31\2\17\1\32"+
    "\1\17\1\33\2\17\1\34\1\17\1\35\1\36\2\17"+
    "\1\37\1\25\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\17\1\47\1\0\1\17\1\20\1\21\2\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\25\1\30\2\17"+
    "\1\31\2\17\1\32\1\17\1\33\2\17\1\34\1\17"+
    "\1\35\1\36\2\17\1\37\1\25\1\40\1\41\1\42"+
    "\1\43\1\44\1\50\1\46\1\17\1\47\1\0\1\17"+
    "\1\20\1\51\2\52\1\53\1\24\1\25\1\26\1\27"+
    "\1\25\1\30\2\17\1\31\2\17\1\32\1\17\1\33"+
    "\2\17\1\34\1\17\1\35\1\36\2\17\1\37\1\25"+
    "\1\40\1\54\1\42\1\43\1\44\1\45\1\46\1\17"+
    "\1\47\1\0\1\17\1\20\1\21\2\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\25\1\30\2\17\1\31\2\17"+
    "\1\32\1\17\1\33\2\17\1\34\1\17\1\35\1\36"+
    "\2\17\1\37\1\25\1\40\1\41\1\55\1\43\1\44"+
    "\1\45\1\46\1\17\1\47\1\0\1\17\1\20\1\56"+
    "\2\22\1\23\1\24\1\25\1\26\1\27\1\25\1\30"+
    "\2\17\1\31\2\17\1\32\1\17\1\33\2\17\1\34"+
    "\1\17\1\35\1\36\2\17\1\37\1\25\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\17\1\47\1\57"+
    "\1\60\1\57\1\21\1\61\1\62\1\63\4\57\1\64"+
    "\1\65\2\60\1\66\4\60\1\67\2\60\1\70\1\60"+
    "\2\57\3\60\2\57\1\71\1\72\1\43\1\73\1\45"+
    "\1\57\1\60\2\57\1\74\1\57\1\21\1\61\1\62"+
    "\1\63\4\57\1\75\1\76\2\74\1\77\4\74\1\100"+
    "\2\74\1\101\1\74\2\57\3\74\2\57\1\71\1\72"+
    "\1\43\1\73\1\45\1\57\1\74\1\57\3\0\1\102"+
    "\2\103\1\104\102\0\1\105\7\0\1\106\12\0\15\106"+
    "\2\0\3\106\10\0\1\106\2\0\1\107\1\13\6\0"+
    "\1\13\2\0\15\107\2\0\3\107\10\0\1\107\15\0"+
    "\1\110\2\0\1\111\4\0\1\112\2\0\1\113\51\0"+
    "\1\114\56\0\1\114\10\0\2\17\1\115\3\116\2\0"+
    "\1\17\2\0\15\17\2\0\3\17\2\0\1\117\5\0"+
    "\1\17\3\0\1\20\6\0\1\20\1\120\40\0\1\121"+
    "\7\0\1\122\110\0\1\22\52\0\1\123\1\124\51\0"+
    "\1\120\36\0\2\17\1\115\3\116\2\0\1\17\2\0"+
    "\1\17\1\125\13\17\2\0\3\17\2\0\1\117\5\0"+
    "\1\126\2\0\2\17\1\115\3\116\2\0\1\17\2\0"+
    "\4\17\1\127\10\17\2\0\3\17\2\0\1\117\5\0"+
    "\1\17\2\0\2\17\1\115\3\116\2\0\1\17\2\0"+
    "\5\17\1\130\7\17\2\0\3\17\2\0\1\117\5\0"+
    "\1\17\2\0\2\17\1\115\3\116\2\0\1\17\2\0"+
    "\2\17\1\131\12\17\2\0\3\17\2\0\1\117\5\0"+
    "\1\17\2\0\2\17\1\115\3\116\2\0\1\17\2\0"+
    "\4\17\1\132\10\17\2\0\3\17\2\0\1\117\5\0"+
    "\1\17\33\0\1\133\16\0\2\17\1\115\3\116\2\0"+
    "\1\17\2\0\15\17\2\0\1\17\1\134\1\17\2\0"+
    "\1\117\5\0\1\17\40\0\1\25\13\0\1\135\3\136"+
    "\34\0\1\137\7\0\1\140\3\141\34\0\1\142\50\0"+
    "\1\143\6\0\1\144\3\145\34\0\1\146\7\0\1\147"+
    "\3\150\31\0\1\151\7\0\3\152\1\153\3\154\31\152"+
    "\1\155\1\156\2\152\1\0\3\152\3\0\1\157\7\0"+
    "\1\122\34\0\4\160\1\0\34\160\1\161\12\160\1\52"+
    "\34\160\1\161\6\160\3\0\1\162\3\163\34\0\1\164"+
    "\7\0\1\121\7\0\1\165\34\0\3\57\4\0\4\57"+
    "\1\0\26\57\1\0\1\57\1\0\4\57\2\60\1\166"+
    "\3\167\2\57\1\60\1\57\1\0\15\60\2\57\3\60"+
    "\4\57\1\0\1\57\1\0\1\57\1\60\1\57\4\0"+
    "\1\61\46\0\1\170\44\0\1\57\2\60\1\166\3\167"+
    "\2\57\1\60\1\57\1\0\1\60\1\171\13\60\2\57"+
    "\3\60\4\57\1\0\1\57\1\0\1\57\1\60\2\57"+
    "\2\60\1\166\3\167\2\57\1\60\1\57\1\0\4\60"+
    "\1\172\10\60\2\57\3\60\4\57\1\0\1\57\1\0"+
    "\1\57\1\60\2\57\2\60\1\166\3\167\2\57\1\60"+
    "\1\57\1\0\2\60\1\173\12\60\2\57\3\60\4\57"+
    "\1\0\1\57\1\0\1\57\1\60\2\57\2\60\1\166"+
    "\3\167\2\57\1\60\1\57\1\0\4\60\1\174\10\60"+
    "\2\57\3\60\4\57\1\0\1\57\1\0\1\57\1\60"+
    "\4\57\1\135\3\136\4\57\1\0\26\57\1\0\1\57"+
    "\1\0\6\57\1\140\3\141\4\57\1\0\26\57\1\0"+
    "\1\57\1\0\6\57\1\144\3\145\4\57\1\0\26\57"+
    "\1\0\1\57\1\0\4\57\2\74\1\175\3\176\2\57"+
    "\1\74\1\57\1\0\15\74\2\57\3\74\4\57\1\0"+
    "\1\57\1\0\1\57\1\74\1\57\3\0\1\177\44\0"+
    "\1\57\2\74\1\175\3\176\2\57\1\74\1\57\1\0"+
    "\1\74\1\200\13\74\2\57\3\74\4\57\1\0\1\57"+
    "\1\0\1\57\1\74\2\57\2\74\1\175\3\176\2\57"+
    "\1\74\1\57\1\0\4\74\1\201\10\74\2\57\3\74"+
    "\4\57\1\0\1\57\1\0\1\57\1\74\2\57\2\74"+
    "\1\175\3\176\2\57\1\74\1\57\1\0\2\74\1\202"+
    "\12\74\2\57\3\74\4\57\1\0\1\57\1\0\1\57"+
    "\1\74\2\57\2\74\1\175\3\176\2\57\1\74\1\57"+
    "\1\0\4\74\1\203\10\74\2\57\3\74\4\57\1\0"+
    "\1\57\1\0\1\57\1\74\1\57\3\0\1\204\50\0"+
    "\1\103\43\0\4\105\1\0\43\105\1\0\2\106\6\0"+
    "\1\106\2\0\15\106\2\0\3\106\10\0\1\106\2\0"+
    "\1\107\1\13\1\0\1\205\2\114\2\0\1\13\2\0"+
    "\15\107\2\0\3\107\10\0\1\107\16\0\1\206\52\0"+
    "\1\207\45\0\1\210\51\0\1\211\33\0\1\205\2\114"+
    "\44\0\1\212\45\0\1\213\1\0\1\115\3\116\5\0"+
    "\15\213\2\0\3\213\2\0\1\117\5\0\1\213\3\0"+
    "\1\214\6\0\1\215\36\0\4\121\1\22\43\121\2\0"+
    "\1\20\4\0\1\216\1\0\1\26\45\0\1\217\41\0"+
    "\2\17\1\115\3\116\2\0\1\17\2\0\2\17\1\220"+
    "\12\17\2\0\3\17\2\0\1\117\5\0\1\17\2\0"+
    "\2\17\1\115\3\116\2\0\1\17\2\0\4\17\1\221"+
    "\10\17\2\0\3\17\2\0\1\117\5\0\1\17\2\0"+
    "\2\17\1\115\3\116\2\0\1\17\2\0\15\17\2\0"+
    "\1\222\2\17\2\0\1\117\5\0\1\17\2\0\2\17"+
    "\1\115\3\116\2\0\1\17\2\0\11\17\1\223\3\17"+
    "\2\0\3\17\2\0\1\117\5\0\1\17\2\0\2\17"+
    "\1\115\3\116\2\0\1\17\2\0\14\17\1\224\2\0"+
    "\3\17\2\0\1\117\5\0\1\17\2\0\2\17\1\115"+
    "\3\116\2\0\1\17\2\0\1\225\14\17\2\0\3\17"+
    "\2\0\1\117\5\0\1\17\4\0\1\226\7\0\1\227"+
    "\37\0\1\230\47\0\1\231\3\232\31\0\1\233\12\0"+
    "\1\234\47\0\1\235\44\0\40\152\1\0\1\156\2\152"+
    "\1\0\6\152\1\236\34\152\1\0\1\156\2\152\1\0"+
    "\3\152\4\157\1\52\43\157\3\0\1\237\7\0\1\240"+
    "\37\0\1\241\45\0\1\242\1\0\1\166\3\167\5\0"+
    "\15\242\2\0\3\242\2\0\1\117\5\0\1\242\1\0"+
    "\1\57\2\60\1\166\3\167\2\57\1\60\1\57\1\0"+
    "\2\60\1\243\12\60\2\57\3\60\4\57\1\0\1\57"+
    "\1\0\1\57\1\60\2\57\2\60\1\166\3\167\2\57"+
    "\1\60\1\57\1\0\4\60\1\244\10\60\2\57\3\60"+
    "\4\57\1\0\1\57\1\0\1\57\1\60\2\57\2\60"+
    "\1\166\3\167\2\57\1\60\1\57\1\0\11\60\1\245"+
    "\3\60\2\57\3\60\4\57\1\0\1\57\1\0\1\57"+
    "\1\60\2\57\2\60\1\166\3\167\2\57\1\60\1\57"+
    "\1\0\14\60\1\246\2\57\3\60\4\57\1\0\1\57"+
    "\1\0\1\57\1\60\1\57\3\0\1\247\45\0\1\250"+
    "\1\0\1\175\3\176\5\0\15\250\2\0\3\250\2\0"+
    "\1\117\5\0\1\250\1\0\1\57\2\74\1\175\3\176"+
    "\2\57\1\74\1\57\1\0\2\74\1\251\12\74\2\57"+
    "\3\74\4\57\1\0\1\57\1\0\1\57\1\74\2\57"+
    "\2\74\1\175\3\176\2\57\1\74\1\57\1\0\4\74"+
    "\1\252\10\74\2\57\3\74\4\57\1\0\1\57\1\0"+
    "\1\57\1\74\2\57\2\74\1\175\3\176\2\57\1\74"+
    "\1\57\1\0\11\74\1\253\3\74\2\57\3\74\4\57"+
    "\1\0\1\57\1\0\1\57\1\74\2\57\2\74\1\175"+
    "\3\176\2\57\1\74\1\57\1\0\14\74\1\254\2\57"+
    "\3\74\4\57\1\0\1\57\1\0\1\57\1\74\1\57"+
    "\4\204\1\103\43\204\3\255\1\256\3\205\41\255\16\0"+
    "\1\257\51\0\1\260\54\0\1\261\52\0\1\262\17\0"+
    "\4\212\1\116\43\212\1\0\2\213\6\0\1\213\2\0"+
    "\15\213\2\0\3\213\10\0\1\213\3\0\1\214\6\0"+
    "\1\214\40\0\1\20\4\0\1\216\1\124\1\26\40\0"+
    "\1\20\4\0\1\24\1\0\1\26\37\0\2\17\1\263"+
    "\3\264\2\0\1\17\2\0\15\17\1\265\1\0\3\17"+
    "\2\0\1\117\5\0\1\17\2\0\2\17\1\115\3\116"+
    "\2\0\1\17\2\0\5\17\1\266\7\17\2\0\3\17"+
    "\2\0\1\117\5\0\1\17\2\0\2\17\1\115\3\116"+
    "\2\0\1\17\2\0\6\17\1\267\6\17\2\0\3\17"+
    "\2\0\1\117\5\0\1\17\2\0\2\17\1\115\3\116"+
    "\2\0\1\17\2\0\1\270\14\17\2\0\3\17\2\0"+
    "\1\117\5\0\1\17\2\0\2\17\1\115\3\116\2\0"+
    "\1\17\2\0\3\17\1\271\11\17\2\0\3\17\2\0"+
    "\1\117\5\0\1\17\2\0\2\17\1\115\3\116\2\0"+
    "\1\17\2\0\5\17\1\272\7\17\2\0\3\17\2\0"+
    "\1\117\5\0\1\17\1\0\4\226\1\136\43\226\4\227"+
    "\1\0\6\227\1\273\34\227\4\230\1\141\43\230\3\0"+
    "\1\274\44\0\4\234\1\145\43\234\4\235\1\150\43\235"+
    "\4\236\1\154\33\236\1\275\1\276\2\236\1\275\3\236"+
    "\4\237\1\163\43\237\4\240\1\0\6\240\1\277\34\240"+
    "\4\241\1\167\43\241\1\0\2\242\6\0\1\242\2\0"+
    "\15\242\2\0\3\242\10\0\1\242\1\0\1\57\2\60"+
    "\1\300\3\301\2\57\1\60\1\57\1\0\15\60\1\302"+
    "\1\57\3\60\4\57\1\0\1\57\1\0\1\57\1\60"+
    "\2\57\2\60\1\166\3\167\2\57\1\60\1\57\1\0"+
    "\5\60\1\303\7\60\2\57\3\60\4\57\1\0\1\57"+
    "\1\0\1\57\1\60\2\57\2\60\1\166\3\167\2\57"+
    "\1\60\1\57\1\0\1\304\14\60\2\57\3\60\4\57"+
    "\1\0\1\57\1\0\1\57\1\60\2\57\2\60\1\166"+
    "\3\167\2\57\1\60\1\57\1\0\3\60\1\305\11\60"+
    "\2\57\3\60\4\57\1\0\1\57\1\0\1\57\1\60"+
    "\1\57\4\247\1\176\43\247\1\0\2\250\6\0\1\250"+
    "\2\0\15\250\2\0\3\250\10\0\1\250\1\0\1\57"+
    "\2\74\1\306\3\307\2\57\1\74\1\57\1\0\15\74"+
    "\1\302\1\57\3\74\4\57\1\0\1\57\1\0\1\57"+
    "\1\74\2\57\2\74\1\175\3\176\2\57\1\74\1\57"+
    "\1\0\5\74\1\310\7\74\2\57\3\74\4\57\1\0"+
    "\1\57\1\0\1\57\1\74\2\57\2\74\1\175\3\176"+
    "\2\57\1\74\1\57\1\0\1\311\14\74\2\57\3\74"+
    "\4\57\1\0\1\57\1\0\1\57\1\74\2\57\2\74"+
    "\1\175\3\176\2\57\1\74\1\57\1\0\3\74\1\312"+
    "\11\74\2\57\3\74\4\57\1\0\1\57\1\0\1\57"+
    "\1\74\1\57\3\255\1\256\1\0\46\255\1\313\1\0"+
    "\43\255\31\0\1\314\37\0\1\315\42\0\1\316\52\0"+
    "\1\317\33\0\1\320\45\0\1\213\1\0\1\263\3\264"+
    "\5\0\15\213\1\321\1\0\3\213\2\0\1\117\5\0"+
    "\1\213\33\0\1\322\16\0\2\17\1\115\3\116\2\0"+
    "\1\17\2\0\6\17\1\323\6\17\2\0\3\17\2\0"+
    "\1\117\5\0\1\17\2\0\2\17\1\115\3\116\2\0"+
    "\1\17\2\0\1\17\1\324\13\17\2\0\3\17\2\0"+
    "\1\117\5\0\1\17\2\0\2\17\1\115\3\116\2\0"+
    "\1\17\2\0\5\17\1\325\7\17\2\0\3\17\2\0"+
    "\1\117\5\0\1\17\2\0\2\17\1\115\3\116\2\0"+
    "\1\17\2\0\6\17\1\126\6\17\2\0\3\17\2\0"+
    "\1\117\5\0\1\17\1\0\3\227\1\326\1\0\6\227"+
    "\1\273\34\227\4\274\1\232\43\274\4\275\1\327\43\275"+
    "\3\240\1\330\1\0\6\240\1\277\34\240\3\0\1\331"+
    "\45\0\1\242\1\0\1\300\3\301\5\0\15\242\1\321"+
    "\1\0\3\242\2\0\1\117\5\0\1\242\1\0\3\57"+
    "\4\0\4\57\1\0\16\57\1\332\7\57\1\0\1\57"+
    "\1\0\4\57\2\60\1\166\3\167\2\57\1\60\1\57"+
    "\1\0\6\60\1\333\6\60\2\57\3\60\4\57\1\0"+
    "\1\57\1\0\1\57\1\60\2\57\2\60\1\166\3\167"+
    "\2\57\1\60\1\57\1\0\1\60\1\334\13\60\2\57"+
    "\3\60\4\57\1\0\1\57\1\0\1\57\1\60\2\57"+
    "\2\60\1\166\3\167\2\57\1\60\1\57\1\0\5\60"+
    "\1\335\7\60\2\57\3\60\4\57\1\0\1\57\1\0"+
    "\1\57\1\60\1\57\3\0\1\336\45\0\1\250\1\0"+
    "\1\306\3\307\5\0\15\250\1\321\1\0\3\250\2\0"+
    "\1\117\5\0\1\250\1\0\1\57\2\74\1\175\3\176"+
    "\2\57\1\74\1\57\1\0\6\74\1\337\6\74\2\57"+
    "\3\74\4\57\1\0\1\57\1\0\1\57\1\74\2\57"+
    "\2\74\1\175\3\176\2\57\1\74\1\57\1\0\1\74"+
    "\1\340\13\74\2\57\3\74\4\57\1\0\1\57\1\0"+
    "\1\57\1\74\2\57\2\74\1\175\3\176\2\57\1\74"+
    "\1\57\1\0\5\74\1\341\7\74\2\57\3\74\4\57"+
    "\1\0\1\57\1\0\1\57\1\74\1\57\3\255\1\313"+
    "\3\205\41\255\32\0\1\257\37\0\1\342\42\0\1\343"+
    "\53\0\1\344\26\0\4\320\1\264\43\320\3\0\1\345"+
    "\3\346\22\0\1\265\17\0\2\17\1\115\3\116\2\0"+
    "\1\17\2\0\7\17\1\347\5\17\2\0\3\17\2\0"+
    "\1\117\5\0\1\17\2\0\2\17\1\115\3\116\2\0"+
    "\1\17\2\0\12\17\1\220\2\17\2\0\3\17\2\0"+
    "\1\117\5\0\1\17\2\0\2\17\1\115\3\116\2\0"+
    "\1\17\2\0\6\17\1\220\6\17\2\0\3\17\2\0"+
    "\1\117\5\0\1\17\1\0\3\227\1\350\1\136\2\326"+
    "\4\227\1\273\27\227\1\351\4\227\3\0\1\352\3\327"+
    "\31\0\1\155\7\0\3\240\1\353\1\354\2\330\4\240"+
    "\1\277\27\240\1\355\4\240\4\331\1\301\43\331\3\57"+
    "\1\345\3\346\4\57\1\0\15\57\1\302\10\57\1\0"+
    "\1\57\1\0\4\57\2\60\1\166\3\167\2\57\1\60"+
    "\1\57\1\0\7\60\1\356\5\60\2\57\3\60\4\57"+
    "\1\0\1\57\1\0\1\57\1\60\2\57\2\60\1\166"+
    "\3\167\2\57\1\60\1\57\1\0\12\60\1\243\2\60"+
    "\2\57\3\60\4\57\1\0\1\57\1\0\1\57\1\60"+
    "\2\57\2\60\1\166\3\167\2\57\1\60\1\57\1\0"+
    "\6\60\1\243\6\60\2\57\3\60\4\57\1\0\1\57"+
    "\1\0\1\57\1\60\1\57\4\336\1\307\43\336\1\57"+
    "\2\74\1\175\3\176\2\57\1\74\1\57\1\0\7\74"+
    "\1\357\5\74\2\57\3\74\4\57\1\0\1\57\1\0"+
    "\1\57\1\74\2\57\2\74\1\175\3\176\2\57\1\74"+
    "\1\57\1\0\12\74\1\251\2\74\2\57\3\74\4\57"+
    "\1\0\1\57\1\0\1\57\1\74\2\57\2\74\1\175"+
    "\3\176\2\57\1\74\1\57\1\0\6\74\1\251\6\74"+
    "\2\57\3\74\4\57\1\0\1\57\1\0\1\57\1\74"+
    "\1\57\23\0\1\360\52\0\1\257\43\0\1\257\30\0"+
    "\1\361\47\0\1\345\3\346\22\0\1\321\17\0\2\17"+
    "\1\115\3\116\2\0\1\17\2\0\1\17\1\220\13\17"+
    "\2\0\3\17\2\0\1\117\5\0\1\17\1\0\3\227"+
    "\1\362\1\0\6\227\1\273\34\227\3\0\1\275\44\0"+
    "\3\240\1\363\1\0\6\240\1\277\34\240\3\0\1\364"+
    "\3\354\34\0\1\365\4\0\1\57\2\60\1\166\3\167"+
    "\2\57\1\60\1\57\1\0\1\60\1\243\13\60\2\57"+
    "\3\60\4\57\1\0\1\57\1\0\1\57\1\60\2\57"+
    "\2\74\1\175\3\176\2\57\1\74\1\57\1\0\1\74"+
    "\1\251\13\74\2\57\3\74\4\57\1\0\1\57\1\0"+
    "\1\57\1\74\1\57\15\0\1\257\32\0\4\361\1\346"+
    "\43\361\4\362\1\136\6\362\1\366\34\362\4\363\1\354"+
    "\6\363\1\367\34\363\3\0\1\370\7\0\1\240\34\0"+
    "\3\362\1\371\1\136\6\362\1\366\34\362\3\363\1\372"+
    "\1\354\6\363\1\367\34\363\4\370\1\354\43\370\4\362"+
    "\1\136\2\371\4\362\1\366\27\362\1\373\4\362\4\363"+
    "\1\354\2\372\4\363\1\367\27\363\1\374\4\363";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8400];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\16\0\2\1\1\0\1\11\1\1\1\0\1\11\1\1"+
    "\1\11\6\1\1\11\7\1\2\11\1\1\1\0\4\1"+
    "\1\0\2\1\2\11\17\1\1\0\1\11\3\1\5\0"+
    "\1\1\2\0\1\11\2\0\1\11\2\0\6\1\1\11"+
    "\1\1\2\0\1\11\2\0\1\11\1\1\2\0\1\11"+
    "\2\0\1\11\3\0\1\11\1\1\2\0\1\1\2\0"+
    "\2\11\2\0\1\11\4\1\2\0\1\11\4\1\1\0"+
    "\1\1\5\0\2\1\1\11\2\0\6\1\5\0\1\11"+
    "\6\0\5\1\1\0\5\1\2\0\1\1\5\0\6\1"+
    "\3\0\1\1\3\0\4\1\2\0\4\1\5\0\1\11"+
    "\4\1\4\0\4\1\1\0\3\1\5\0\1\1\1\0"+
    "\1\1\3\0\3\1\5\0\1\11\5\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
  int numTabs = 0;
  int columnCount = 0;
  public void printTabs(){
    for(int i = 0; i < numTabs; i++){
      System.out.print("\t");    
    }
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 126) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 21: 
          { yybegin(IF_WHILE);
                                          System.out.print(yytext());
          }
        case 43: break;
        case 5: 
          { System.out.print("[ ");
          }
        case 44: break;
        case 28: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { System.out.print(" )"); yybegin(YYINITIAL);
          }
        case 45: break;
        case 33: 
          { System.out.println("*/");
                                          numTabs--;
                                          printTabs();
                                          yybegin(YYINITIAL);
                                          columnCount = 0;
          }
        case 46: break;
        case 22: 
          { System.out.print("[]");
          }
        case 47: break;
        case 6: 
          { System.out.print(" ]");
          }
        case 48: break;
        case 10: 
          { System.out.println("}");
                                          printTabs();
          }
        case 49: break;
        case 32: 
          { System.out.print(yytext());
                                          yybegin(BLOCK_COMMENT_RETURN);
                                          columnCount = yycolumn;
          }
        case 50: break;
        case 27: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { System.out.print(" ) ");
          }
        case 51: break;
        case 34: 
          { System.out.println("*/"); printTabs(); 
                                          yybegin(YYINITIAL);
                                          columnCount = 0;
          }
        case 52: break;
        case 4: 
          { System.out.print(".");
          }
        case 53: break;
        case 39: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 9;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 10;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { System.out.print(yytext());
                                          columnCount += yytext().length();
                                          if(columnCount >= 80){
                                            System.out.println();
                                            columnCount = 0;
                                          }
          }
        case 54: break;
        case 38: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 9;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 10;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { System.out.print(yytext());
                                          columnCount += yytext().length();
                                          if(columnCount >= 80){
                                            System.out.println();
                                            columnCount = 0;
                                          }
          }
        case 55: break;
        case 16: 
          { System.out.print(yytext());
                                          columnCount += yytext().length();
                                          if(columnCount >= 80){
                                            System.out.println();
                                            columnCount = 0;
                                          }
          }
        case 56: break;
        case 17: 
          { System.out.print(yytext()); columnCount = 0;
          }
        case 57: break;
        case 37: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { System.out.print("() ");
          }
        case 58: break;
        case 35: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 9;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 10;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { if( yytext().equals("else") ){ yybegin(ELSE); System.out.print(yytext()+ " ");}
                                          else{

                                            System.out.print(yytext() + " "); }
          }
        case 59: break;
        case 29: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { System.out.print(" )\n"); numTabs++; printTabs(); yybegin(LINE_OUT);
          }
        case 60: break;
        case 3: 
          { System.out.print(" " + yytext() + " ");
          }
        case 61: break;
        case 40: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 11;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 12;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { System.out.print(yytext());
          }
        case 62: break;
        case 14: 
          { yybegin(YYINITIAL);
                                          System.out.print(" {\n");
                                          numTabs++;
                                          printTabs();
          }
        case 63: break;
        case 1: 
          { System.out.print(yytext());
          }
        case 64: break;
        case 7: 
          { System.out.print("{\n");
                                          numTabs++;
                                          printTabs();
          }
        case 65: break;
        case 26: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { System.out.println("}");
                                          numTabs--;
                                          printTabs();
          }
        case 66: break;
        case 18: 
          { System.out.print(yytext()); columnCount += 1;
          }
        case 67: break;
        case 8: 
          { System.out.println(";");
                                          printTabs();
          }
        case 68: break;
        case 30: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 7;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 8;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { System.out.println();
                                          numTabs++; 
                                          printTabs(); 
                                          yybegin(LINE_OUT);
          }
        case 69: break;
        case 42: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { System.out.print(";\n");
                                          numTabs-=1;
                                          printTabs();
                                          yybegin(LINE_OUT_BLOCK_COMMENT);
          }
        case 70: break;
        case 25: 
          { System.out.print("()");
          }
        case 71: break;
        case 23: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { System.out.print("{\n");
                                          printTabs();
          }
        case 72: break;
        case 24: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { System.out.println(";");
                                          numTabs--; 
                                          printTabs();
          }
        case 73: break;
        case 15: 
          { System.out.print(";\n");
                                          numTabs--;
                                          printTabs();
                                          yybegin(YYINITIAL);
          }
        case 74: break;
        case 41: 
          { yybegin(ELSE);
                                          System.out.print(yytext());
          }
        case 75: break;
        case 31: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { System.out.print(";\n");
                                          numTabs-=2;
                                          printTabs();
                                          yybegin(YYINITIAL);
          }
        case 76: break;
        case 36: 
          { System.out.print(yytext() + " ");
          }
        case 77: break;
        case 19: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 9;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 13;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { System.out.print(yytext() + " ");
          }
        case 78: break;
        case 11: 
          { System.out.print(" )");
          }
        case 79: break;
        case 13: 
          { System.out.print(", ");
          }
        case 80: break;
        case 20: 
          { System.out.print(yytext()); yybegin(BLOCK_COMMENT); columnCount = yycolumn;
          }
        case 81: break;
        case 12: 
          { System.out.print("!");
          }
        case 82: break;
        case 2: 
          { 
          }
        case 83: break;
        case 9: 
          { System.out.print("( ");
          }
        case 84: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return 1;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
